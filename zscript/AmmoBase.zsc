class PB_Ammo : Ammo
{
    int cap,ca,res; name ammotype; string p; actor dtfx;
	property ammotype : ammotype;

    Default
    {
        +FLOORCLIP
	    +DONTGIB
	    +INVENTORY.IGNORESKILL
    }

    override void PostBeginPlay()
    {
        Super.PostBeginPlay();
        switch(ammotype)
        {
            case 'lowcal': sprite = GetSpriteIndex("MBLK"); break;
            case 'lowcalbox': sprite = GetSpriteIndex("AMOK"); break;
            case 'highcal': sprite = GetSpriteIndex("CLIP"); break;
            case 'highcalbox': sprite = GetSpriteIndex("AMMO"); break;
            case 'shell': sprite = GetSpriteIndex("SHEL"); break;
            case 'shellbox': sprite = GetSpriteIndex("SBOX"); break;
            case 'exp': sprite = GetSpriteIndex("R0CK"); break;
            case 'expbox': sprite = GetSpriteIndex("BROK"); break;
            case 'cell' : SetStateLabel("SpawnCell"); break;
			case 'cellpack' : SetStateLabel("SpawnCellPack"); break;
            case 'fuel': sprite = GetSpriteIndex("GSLN"); break;
            case 'dtech':
				SetStateLabel("SpawnDTech");
				dtfx = PB_DTechAmmoEffect(Spawn("PB_DTechAmmoEffect",pos));
                if(dtfx)
                {
					dtfx.master = self;
                    dtfx.scale.x = 0.214;
                    dtfx.scale.y = dtfx.scale.x;
                }
				break;
			case 'nade': SetStateLabel("SpawnNade"); break;
			case 'nadestun': sprite = GetSpriteIndex("STNG"); break;
			case 'proxmine': sprite = GetSpriteIndex("XPFP"); break;
			case 'ql': SetStateLabel("SpawnQL"); break;
        }
    }

    override class<Ammo> GetParentAmmo()
	{
		class<Object> type = GetClass();
		while(type.GetParentClass()!= "PB_Ammo"&&type.GetParentClass()!=null) type = type.GetParentClass();
		return(class<Ammo>)(type);
	}

    override bool TryPickup(in out actor toucher)
	{
		class<Ammo> type = GetParentAmmo();
		double factor = G_SkillPropertyFloat(SKILLP_AmmoFactor)*(bDROPPED?-G_SkillPropertyFloat(SKILLP_DropAmmoFactor):1);
		int aa = self.amount*factor;
		if(toucher && toucher is "PlayerPawn")
		{
			cap = toucher.FindInventory("Backpack",true)?self.BackpackMaxAmount:self.MaxAmount;
			ca = toucher.CountInv(type);
		}
		res = cap-ca;
		if(res<aa) AmmoCheck();
		else { res = aa; AmmoCheck(); }
		return Super.TryPickup(toucher);
	}

	void AmmoCheck() { if(res==1 || ammotype == "fuel" || ammotype == "dtech" ) p = "+%d %s"; else p = "+%d %ss"; }
	
	override string PickupMessage() { return string.format(p,res,GetTag()); }

    States
	{
	Spawn:
		TNT1 A 0;
		#### A -1;
		stop;
	SpawnCell:
		CELL ABCDEFGH 2;
		loop;
	SpawnCellPack:
		YELP ABCDEFGHIJ 2;
		loop;
	SpawnDTech:
		DB61 AABCCDEEFGGHIIJJ 1 bright;
		loop;
	SpawnNade:
		PGRN D -1;
		stop;
	SpawnQL:
		FATB D -1;
		stop;
	LoadSprites:
		MBLK A 0; AMOK A 0; CLIP A 0; AMMO A 0; SHEL A 0; SBOX A 0; ROCK A 0; BROK A 0; GSLN A 0; STNG A 0; XPFP A 0;
	}
}

class PB_LowCalMag : PB_Ammo
{
    Default
    {
        Scale 0.13;
        Tag "Low Caliber Round";
        Inventory.Amount 10;
        Inventory.MaxAmount 200;
        Inventory.PickupSound "misc/clip_PickUp";
	    Ammo.BackpackAmount 10;
	    Ammo.BackpackMaxAmount 400;
        PB_Ammo.ammotype "lowcal";
    }
}

class PB_LowCalBox : PB_LowCalMag
{
    Default
    {
        Inventory.Amount 60;
        Inventory.PickupSound "CBOXPKUP";
        PB_Ammo.ammotype "lowcalbox";
    }
}

class PB_HighCalMag : PB_Ammo
{
    Default
    {
        Scale 0.12;
        Tag "High Caliber Round";
        Inventory.Amount 15;
        Inventory.MaxAmount 300;
        Inventory.PickupSound "misc/clip_PickUp";
        Ammo.BackpackAmount 15;
        Ammo.BackpackMaxAmount 600;
        PB_Ammo.ammotype "highcal";
    }
}

class PB_HighCalBox : PB_HighCalMag
{
    Default
    {
        Scale 0.18;
	    Inventory.Amount 60;
        Inventory.PickupSound "CBOXPKUP";
        PB_Ammo.ammotype "highcalbox";
    }
}

class PB_Shell : PB_Ammo replaces shell
{
    Default
    {
        Scale 0.14;
        Tag "Shotgun Shell";
        Inventory.Amount 4;
        Inventory.MaxAmount 50;
        Inventory.PickupSound "misc/shell_PickUp";
        Ammo.BackpackAmount 4;
        Ammo.BackpackMaxAmount 100;
        PB_Ammo.ammotype "shell";
    }
}

class PB_ShellBox : PB_Shell replaces shellbox
{
    Default
    {
        Scale 0.25;
	    Inventory.Amount 12;
        Inventory.PickupSound "misc/shellbox_PickUp";
        PB_Ammo.ammotype "shellbox";
    }
}

class PB_RocketAmmo : PB_Ammo replaces rocketammo
{
    Default
    {
        Scale 0.45;
        Tag "Explosive Round";
        Inventory.Amount 1;
        Inventory.MaxAmount 50;
        Inventory.PickupSound "misc/rocket_PickUp";
        Ammo.BackpackAmount 1;
        Ammo.BackpackMaxAmount 100;
        PB_Ammo.ammotype "exp";
    }
}

class PB_RocketBox : PB_RocketAmmo replaces rocketbox
{
    Default
    {
        Scale 1;
        Inventory.Amount 6;
        Inventory.PickupSound "misc/rockboxa";
        PB_Ammo.ammotype "expbox";
    }
}

class PB_Cell : PB_Ammo replaces cell
{
    Default
    {
        Scale 0.4;
        Tag "Cell";
        Inventory.Amount 20;
        Inventory.MaxAmount 300;
        Inventory.PickupSound "misc/cell_PickUp";
        Ammo.BackpackAmount 20;
        Ammo.BackpackMaxAmount 600;
        PB_Ammo.ammotype "cell";
    }
}

class PB_CellPack : PB_Cell replaces cellpack
{
    Default
    {
        Scale 0.4;
        Inventory.Amount 100;
        Inventory.PickupSound "misc/bulkcell_PickUp";
        PB_Ammo.ammotype "cellpack";
    }
}

class PB_Fuel : PB_Ammo
{
    Default
    {
        Tag "Fuel";
        Inventory.Amount 50;
        Inventory.MaxAmount 300;
        Inventory.PickupSound "CSAWGAS";
        Ammo.BackpackAmount 150;
        Ammo.BackpackMaxAmount 600;
		PB_Ammo.ammotype "fuel";
    }
}

class PB_DTech : PB_Ammo replaces demonpickup
{
    Default
    {
		Scale 0.25;
        RenderStyle "Add";
        Tag "Demon Energy";
        Inventory.Amount 20;
        Inventory.MaxAmount 300;
        Inventory.PickupSound "demonsoulpickup";
        Ammo.BackpackAmount 0;
        Ammo.BackpackMaxAmount 600;
		PB_Ammo.ammotype "dtech";
    }
	
	override void DoPickupSpecial(actor toucher)
    {
        if(dtfx) dtfx.Destroy();
        toucher.GiveInventory("PB_ArmorBonus",1);
        Super.DoPickupSpecial(toucher);
    }
}

class PB_DTechLarge : PB_DTech replaces demonpickup2
{
    Default
    {
		Scale 0.35;
        Inventory.Amount 40;
    }
	override void PostBeginPlay()
    {
        Super.PostBeginPlay();
        if(dtfx) { dtfx.scale.x = 0.3; dtfx.scale.y = dtfx.scale.x; }
    }
	override void DoPickupSpecial(actor toucher)
    {
        toucher.GiveInventory("PB_ArmorBonus",1);
        toucher.GiveInventory("PB_HealthBonus",2);
        Super.DoPickupSpecial(toucher);
    }
}

class PB_DTechAmmoEffect : Actor
{
	Default
	{
		Alpha 0.8;
		+BRIGHT
	}
	
	States
	{
	Spawn:
		DB61 KKLLMMNNOOPPQQRR 1 A_Warp(AAPTR_MASTER,flags:WARPF_INTERPOLATE);
		loop;
	}
}

//Equipment ammo
class PB_GrenadeAmmo : PB_Ammo
{
    Default
    {
        Scale 0.45;
        Tag "Frag Grenade";
        Inventory.Amount 1;
        Inventory.MaxAmount 6;
        Inventory.Icon "PGRND0";
        Ammo.BackpackAmount 1;
        Ammo.BackpackMaxAmount 12;
		PB_Ammo.ammotype "nade";
    }
}

class PB_StunGrenadeAmmo : PB_Ammo
{
    Default
    {
        Scale 0.6;
		Tag "Stun Grenade";
        Inventory.Amount 1;
        Inventory.MaxAmount 6;
		Inventory.PickupSound "StunGrenadePickup";
        Inventory.Icon "STNGA0";
        Ammo.BackpackAmount 1;
        Ammo.BackpackMaxAmount 12;
		PB_Ammo.ammotype "nadestun";
    }
}

class PB_ProxMineAmmo : PB_Ammo
{
    Default
    {
        Scale 0.35;
        Tag "Proximity Mine";
        Inventory.Amount 1;
        Inventory.MaxAmount 6;
        Inventory.PickupSound "GRNPIN";
        Ammo.BackpackAmount 3;
        Ammo.BackpackMaxAmount 12;
		PB_Ammo.ammotype "proxmine";
    }
}

class PB_QuickLauncherAmmo : PB_Ammo
{
    Default
    {
        Tag "Quick Launcher";
		Inventory.Amount 1;
        Inventory.MaxAmount 15;
		Inventory.PickupSound "REVUP";
        Inventory.Icon "HREVCY";
        Ammo.BackpackAmount 1;
        Ammo.BackpackMaxAmount 30;
		PB_Ammo.ammotype "ql";
    }
	
	override bool TryPickup(in out actor toucher)
	{
		toucher.GiveInventory("HasRevGun",1) ;
		return Super.TryPickup(toucher);
	}
}

//Backpack
class PB_Backpack : Backpack { Default { Inventory.PickupSound "BACKPCK"; } }