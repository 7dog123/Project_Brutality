

class PB_WeaponBase : DoomWeapon
{
	double exaggerationMultiplier;
	Actor laseractor;
	Actor InvActor;
	Vector3 invactorpos;
	Statelabel UnloadedState;
	property UnloadedState: UnloadedState;
	string UnloaderToken;
	property UnloaderToken: UnloaderToken;
	int integer;
	string MidWeaponPickupMessage;
	property MidPickupMessage: MidWeaponPickupMessage;
	string lastGrenadeType;
	property lastGrenadeType: lastGrenadeType;
	
	string respectInventoryItem;
	property respectItem: respectInventoryItem;
	
	string rocketLauncherMode;
	property rocketLauncherMode: rocketLauncherMode;
	
	string upgradedRifleMode;
	property upgradedRifleMode: upgradedRifleMode;
	string fireMode;
	property fireMode: fireMode;
	bool akimboMode;
	property akimboMode: akimboMode;
	
	bool FiringLeftWeapon;
	bool FiringRightWeapon;
	property FiringLeftWeapon: FiringLeftWeapon;
	property FiringRightWeapon: FiringRightWeapon;
	
	
	bool usingEquipment;
	property usingEquipment: usingEquipment;
	
	bool usingMelee;
	property usingMelee: usingMelee;
	
	bool usingKick;
	property usingKick: usingKick;
	
	bool executingEnemy;
	property executingEnemy: executingEnemy;
	
	double horizontalOffsetRecoil;
	property OffsetRecoilX: horizontalOffsetRecoil;

	double verticalOffsetRecoil;
	property OffsetRecoilY: verticalOffsetRecoil;
	
	bool chainsawMode;
	property chainsawMode: chainsawMode;
	
	//Cemtex's PB_AmmoIntoMag function variables
	string AmmoMag;
	string AmmoPool;
	int MagazineMaxFill;
	int TakeGiveResrvAmnt; //So no states would be made for weapons that take more than one of their desired reserve ammo
	
	action void PB_FireOffset(bool interp = true) {
		if( !cvar.GetCVar("PB_ExaggeratedRecoil", invoker.owner.player).GetBool() )
			return;
		invoker.exaggerationMultiplier = cvar.GetCVar("PB_ExaggeratedRecoilMul", invoker.owner.player).GetFloat();
		if(invoker.exaggerationMultiplier == 0) {
			invoker.exaggerationMultiplier = 0.1;
		}
		
		A_WeaponOffset(frandom(-invoker.horizontalOffsetRecoil, invoker.horizontalOffsetRecoil) * invoker.exaggerationMultiplier, frandom(1, invoker.verticalOffsetRecoil) * invoker.exaggerationMultiplier + 32, WOF_INTERPOLATE);
		A_SetRoll(roll + frandom(-invoker.horizontalOffsetRecoil, invoker.horizontalOffsetRecoil) * invoker.exaggerationMultiplier, SPF_INTERPOLATE);
	}
	
	action bool PB_ChainsawHealthRestore(){
		return invoker.chainsawMode;
	}
	
	action void PB_SetChainsawHealthRestore(bool type){
		invoker.executingEnemy = type;
	}
	
	action void PB_SawAttack(bool verticalCut = 0, bool stealArmor = 0)
	{
		
				double playerHealth = self.health;
				Actor target = self.GetPointer(AAPTR_PLAYER_GETTARGET);
				
				if(target)
				{
					if(CountInv("ChainsawResourceGather") == 1 && (target is "PB_Monster" || target.bCountKill == true) && CountInv("Gas") > 0 && playerHealth < 200) {
						
						double coefficient = 0.015;
						if (playerHealth < 100) {coefficient = 0.03;}
							
							
						double healingFactor = coefficient*sqrt(200-playerHealth);
						
						if(verticalCut) {
							A_Saw("", "Machete/Yum", 2, "SSawPuff3", SF_NOPULLIN|SF_NOTURN|SF_NOUSEAMMOMISS, 80, 3, 0, healingFactor, 200);
						}
						else {
							A_Saw("", "Machete/Yum", 2, "SSawPuff2", SF_NOPULLIN|SF_NOTURN|SF_NOUSEAMMOMISS, 80, 3, 0, healingFactor, 200);
						}
					
					}
					else {
						if(verticalCut) {
							A_Saw("", "Machete/Yum", 2, "SSawPuff3", SF_NOPULLIN|SF_NOTURN|SF_NOUSEAMMOMISS|SF_NOUSEAMMO , 80, 3, 0);
						}
						else {
							A_Saw("", "Machete/Yum", 2, "SSawPuff2", SF_NOPULLIN|SF_NOTURN|SF_NOUSEAMMOMISS|SF_NOUSEAMMO , 80, 3, 0);
						}
					}
				}
				
	}
	
	
	
	action bool PB_usingEquipment(){
		return invoker.usingEquipment;
	}
	
	action void PB_SetUsingEquipment(bool type){
		invoker.usingEquipment = type;
	}
	
	action bool PB_usingMelee(){
		return invoker.usingMelee;
	}
	
	action void PB_SetUsingMelee(bool type){
		invoker.usingMelee = type;
	}
	
	
	action bool PB_usingKick(){
		return invoker.usingKick;
	}
	
	action void PB_SetUsingKick(bool type){
		invoker.usingKick = type;
	}
	
	
	action bool PB_executingEnemy(){
		return invoker.executingEnemy;
	}
	
	action void PB_SetExecutingEnemy(bool type){
		invoker.executingEnemy = type;
	}
	
	action void PB_SetPlayerExecutionProperties() {
		A_GiveInventory("ExecutionToken", 1); // When dashing, make sure to STOP player momentum, or else it fucks with the execution. Using a token for now.
		A_ClearOverlays(10,11);
		A_StopSound(CHAN_7);
		A_StopSound(CHAN_WEAPON);
		SetPlayerProperty(0, 1, PROP_INVULNERABILITY);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN );
		SetPlayerProperty(0, 1, PROP_FLY);
		PB_SetExecutingEnemy(true);
	}
	
	
	action void PB_UnsetPlayerExecutionProperties() {
		SetPlayerProperty(0, 0, PROP_INVULNERABILITY);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN );
		SetPlayerProperty(0, 0, PROP_FLY);
		PB_SetExecutingEnemy(false);
		PB_SetUsingMelee(false);
		//A_ClearTarget();
		A_TakeInventory("KnifeHasHit",1);
		A_TakeInventory("HasCutingWeapon", 1);
		A_TakeInventory("ExecutionToken", 1);
	}
	
	
	action StateLabel PB_ExecuteZombieMan() {
		A_GiveInventory("ExecutionToken", 1, AAPTR_PLAYER_GETTARGET); // Todo: Move this to a higher function once more fatalities are done
		StateLabel result;
		int selector = (random(1,4));
		FLineTraceData RemoteRay;
		bool wallcheck = LineTrace(
		   angle,
		   120,
		   pitch,
		   TRF_THRUACTORS,
		   offsetz: height-12,
		   data: RemoteRay
		);
		
		// Drop Kick Fatality
		if((Pos.Z-floorz) > 8) {
			A_Warp(AAPTR_PLAYER_GETTARGET, 0, 0, 54, WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
			result = "Execution_Zombieman4";
			return result;
		}
		
		// Wall Kick Fatality
		if(wallcheck && RemoteRay.HitType == TRACE_HitWall) {
			result = "Execution_Zombieman3";
			return result;
		}
		
		// Generic Fatalities
		switch(selector){
			case 1:
				result = "Execution_Zombieman1";
				break;
			case 2:
				result = "Execution_Zombieman2";
				break;
			case 3:
				result = "Execution_Zombieman5";
				break;
			case 4:
				result = "Execution_Zombieman6";
				break;
		}
		return result;
	}
	
	action StateLabel PB_ExecuteShotguny() {
		A_GiveInventory("ExecutionToken", 1, AAPTR_PLAYER_GETTARGET); // Todo: Move this to a higher function once more fatalities are done
		StateLabel result;
		int selector = (random(1,4));
		FLineTraceData RemoteRay;
		bool wallcheck = LineTrace(
		   angle,
		   120,
		   pitch,
		   TRF_THRUACTORS,
		   offsetz: height-12,
		   data: RemoteRay
		);
		
		// Drop Kick Fatality
		if((Pos.Z-floorz) > 8) {
			A_Warp(AAPTR_PLAYER_GETTARGET, 0, 0, 54, WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
			result = "Execution_ShotgunGuy4";
			return result;
		}
		
		// Wall Kick Fatality
		if(wallcheck && RemoteRay.HitType == TRACE_HitWall) {
			result = "Execution_ShotgunGuy3";
			return result;
		}
		
		// Generic Fatalities
		switch(selector){
			case 1:
				result = "Execution_ShotgunGuy1";
				break;
			case 2:
				result = "Execution_ShotgunGuy2";
				break;
			case 3:
				result = "Execution_ShotgunGuy5";
				break;
			case 4:
				result = "Execution_ShotgunGuy6";
				break;
		}
		return result;
	}
	
	
	action StateLabel PB_ExecuteImp() {
		A_GiveInventory("ExecutionToken", 1, AAPTR_PLAYER_GETTARGET); // Todo: Move this to a higher function once more fatalities are done
		StateLabel result;
		int selector = (random(1,2));
// 		int selector = 2;
		FLineTraceData RemoteRay;
		bool wallcheck = LineTrace(
		   angle,
		   120,
		   pitch,
		   TRF_THRUACTORS,
		   offsetz: height-12,
		   data: RemoteRay
		);
		
		// Drop Kick Fatality
		if((Pos.Z-floorz) > 8) {
			A_Warp(AAPTR_PLAYER_GETTARGET, 0, 0, 54, WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
			result = "Execution_Imp3";
			return result;
		}
		
		
// 		// Wall Kick Fatality
// 		if(wallcheck && RemoteRay.HitType == TRACE_HitWall) {
// 			result = "Execution_Zombieman3";
// 			return result;
// 		}
		
		// Generic Fatalities
		switch(selector){
			case 1:
				result = "Execution_Imp1";
				break;
			case 2:
				result = "Execution_Imp2";
				break;
		}
		return result;
	}
		
	action StateLabel PB_ExecutionHandlerString(Actor monster) {
	
		A_Stop();
		PB_SetPlayerExecutionProperties();
		A_SetCrosshair(5);
		
		name enemy = monster.getClassName();
// 		A_print(enemy);
		
		switch(enemy){
			// Zombieman
			case 'PB_Zombieman':
				return PB_ExecuteZombieMan();
			case 'PB_PistolZombieman1':
				return PB_ExecuteZombieMan();
			case 'PB_HelmetZombieman':
				return PB_ExecuteZombieMan();
			case 'PB_PistolZombieman2':
				return PB_ExecuteZombieMan();
			
			// Imp
			case 'PB_Imp1':
				return PB_ExecuteImp();
				
			//Shotgun Guy
			case 'PB_ShotgunGuy':
				return PB_ExecuteShotguny();
				
			default:
				A_Print("Execution Failed");
				PB_UnsetPlayerExecutionProperties();
				return "GoingToReady2";
		}
	}
	
	action state PB_Execute() {
	
        CVar experimental_settings = CVar.FindCVar('pb_experimental');
		
		if(experimental_settings.GetBool()){
			//
			if(GetPointer(AAPTR_PLAYER_GETTARGET) != NULL)
			{
// 				if (GetPointer(AAPTR_PLAYER_GETTARGET) is "PB_Monster" && Distance3D(AAPTR_PLAYER_GETTARGET) < 120 ){
				
				if(GetPointer(AAPTR_PLAYER_GETTARGET) is "PB_Monster")
				{
					LookExParams look;
					look.FOV = 110;
					
					Actor monster = GetPointer(AAPTR_PLAYER_GETTARGET);
					
					if (GetPointer(AAPTR_PLAYER_GETTARGET).IsVisible(self, false, look) && Distance3D(monster) < 250 ){
						
// 						Actor monster = self.AimTarget();

						int targetMaxHealth = monster.spawnHealth();
						int targetCurrentHealth = monster.health;
						
						if (targetCurrentHealth <= targetMaxHealth*0.2|| targetCurrentHealth < 65) {
							StateLabel st = PB_ExecutionHandlerString(monster);
							return ResolveState(st);
						}
					}
				}
			}
		}
		return null;
	}
	
	// Shoutout to Matt on ZDoom forums for the helpful weapon functions
    action bool PressingFire(){return player.cmd.buttons & BT_ATTACK;}
    action bool PressingAltfire(){return player.cmd.buttons & BT_ALTATTACK;}
	action bool PressingReload(){return player.cmd.buttons & BT_RELOAD;}
	action bool PressingUser1(){return player.cmd.buttons & BT_USER1;}
	action bool PressingUser4(){return player.cmd.buttons & BT_USER4;} //Particularly for the fist combos
	
	//Set weapon recoil, factoring in the recoil multiplier cvar
	//Normally you want to use PB_WeaponRecoil instead, because it accounts for the berserk powerup
	action void PB_WeaponRecoilBasic(float pitchDelta, float angleDelta = 0)
	{
        A_SetPitch(self.pitch+(pitchDelta * pb_weapon_recoil_mod_vertical), SPF_INTERPOLATE);
        A_SetAngle(self.angle+(angleDelta * pb_weapon_recoil_mod_horizontal), SPF_INTERPOLATE);
	}
	
	//Adds weapon recoil, modifying it if the owner has a berserk powerup
	action void PB_WeaponRecoil(float pitchDelta, float angleDelta, float powerMod = 0.5)
	{
        if (invoker.OwnerHasBerserk())
            PB_WeaponRecoilBasic(pitchDelta * powerMod, angleDelta * powerMod);
        else
            PB_WeaponRecoilBasic(pitchDelta, angleDelta);
	}
	
	//This will allow for direct spawning of shell casings and empty magazines without using an intermediary actor.
	//I highly recommend making cvars for each of the perameters for location and velocity to edit and test live, and with those numbers transpose into the final code.
	//upon request I also have code for the tactical lean mod out there.
	Action State PB_SpawnCasing(String Missile,Double ShellX,Double ShellY,Double ShellZ,Double ShellV_X,Double ShellV_Y,Double ShellV_Z)
	{
		A_SpawnItemEX(Missile,cos(pitch)*ShellX,ShellY,((ShellZ)*players[consoleplayer].Crouchfactor)-(sin(pitch)*ShellX),ShellV_X,ShellV_Y,ShellV_Z,0,SXF_TRANSFERPITCH,0);
	Return Null;
	}
	
	//An example of this action: PB_AmmoIntoMag("RifleAmmo","NewClip",30,1) 
	action void PB_AmmoIntoMag(String AmmoMag_Action,String AmmoPool_Action,int MagazineMaxFill_Action, int takeReserve)//A way to perform pretty much take all of the "Insertbullets" states and turn it into a function
		{
			invoker.AmmoMag = AmmoMag_Action;
			invoker.AmmoPool = AmmoPool_Action;
			invoker.MagazineMaxFill = MagazineMaxFill_Action;
			invoker.TakeGiveResrvAmnt = takeReserve;

			A_Overlay(-97,"InsertBullets_Zscript");
		}
	//Copy of Cemtex's PB_AmmoIntoMag but for unloading
	//A way to perform pretty much take all of the "RemoveBullets" states and turn it into a function	
	//An example of this action: PB_UnloadMag("RifleAmmo","NewClip",1) 
	action void PB_UnloadMag(String AmmoMag_Action,String AmmoPool_Action, int giveReserve)
		{
			invoker.AmmoMag = AmmoMag_Action;
			invoker.AmmoPool = AmmoPool_Action;
			invoker.TakeGiveResrvAmnt = giveReserve;

			A_Overlay(-97,"RemoveBullets_ZScript");
		}
		
	//Checks if the owner has a berserk
	bool OwnerHasBerserk()
	{
        return (owner.CountInv("PowerStrength") >= 1);
	}
	
	//Allows us to specify pitch and angle manually for berserk and non-berserk owners.
	//Used occasionally where berserk recoil numbers aren't exactly half/double in a few cases, such as the pistol
	action void PB_WeaponRecoilSpecial(float pitchDelta, float angleDelta, float pitchDeltaBerserk, float angleDeltaBerserk)
	{
        if (invoker.OwnerHasBerserk())
            PB_WeaponRecoilBasic(pitchDeltaBerserk, angleDeltaBerserk);
        else
            PB_WeaponRecoilBasic(pitchDelta, angleDelta);
	}
	
    action bool JustPressed(int which) // "which" being any BT_* value, mentioned above or not
    {
        return player.cmd.buttons & which && !(player.oldbuttons & which);
    }
    action bool JustReleased(int which)
    {
        return !(player.cmd.buttons & which) && player.oldbuttons & which;
    }
	
    action bool IsPressingInput(int which){return player.cmd.buttons & which;}
	
	Default
	{
		Weapon.BobRangeX 0.3;
		Weapon.BobRangeY 0.5;
		Weapon.BobSpeed 2.4;
		Weapon.BobStyle "InverseSmooth";
		PB_WeaponBase.UnloaderToken "HasUnloaded";
	}
	override void AttachToOwner(Actor Other)
	{
		Super.AttachToOwner(other);
		let toucher = other;
		bool IsAlreadyPicked = false;
		if (toucher.FindInventory("PB_PDAWeaponContainer",true))
		{
			PB_PDAWeaponContainer pdaweapContainer = PB_PDAWeaponContainer(toucher.FindInventory("PB_PDAWeaponContainer",true));
			pdaweapContainer.CollectedWeapons.Push(self.GetClassName());
			EventHandler.SendNetworkEvent("Foundweapon:"..self.GetClassName());
		}
	}
	
	//Weapon token take away in one function
	action void PB_WeapTokenSwitch(name wepToken) 
	{
			PB_SetUsingMelee(false); //force to false so that quick melee doesn't break on some weapons
			PB_SetUsingKick(false); //force to false so that kicking doesn't break on some weapons
			SetPlayerProperty(0,0,0); //Force the player to get unstuck
			A_SetInventory("ADSMode",0);
			A_SetInventory("Zoomed",0);
			A_SetInventory("Unloading",0);
			A_SetInventory("RifleWasEmpty",0);
			A_SetInventory("RifleSelected",0);
			A_SetInventory("CarbineSelected",0);
			A_SetInventory("FistsSelected",0);
			A_SetInventory("SawSelected",0);
			A_SetInventory("SledgeSelected",0);
			A_SetInventory("HandgunSelected",0);
			A_SetInventory("DualHandgunSelected",0);
			A_SetInventory("RevolverSelected",0);
			A_SetInventory("DeagleSelected",0);
			A_SetInventory("ShotgunSelected",0);
			A_SetInventory("SSGSelected",0);
			A_SetInventory("ASGSelected",0);
			A_SetInventory("QSGSelected",0);
			A_SetInventory("MinigunSelected",0);
			A_SetInventory("MG42Selected",0);
			A_SetInventory("NewChaingunSelected",0);
			A_SetInventory("RocketLauncherSelected",0);
			A_SetInventory("GrenadeLauncherSelected",0);
			A_SetInventory("SGLSelected",0);
			A_SetInventory("PlasmaGunSelected",0);
			A_SetInventory("M2Selected",0);
			A_SetInventory("CryoRifleSelected",0);
			A_SetInventory("RailGunSelected",0);
			A_SetInventory("BFGSelected",0);
			A_SetInventory("BFGBeamSelected",0);
			A_SetInventory("BHCSelected",0);
			A_SetInventory("RevenantLauncherSelected",0);
			A_SetInventory("UnmakerSelected",0);
			A_SetInventory("FlameCannonSelected",0);
			A_SetInventory("HellRifleSelected",0);
			A_SetInventory("LandMineSelected",0);
			A_SetInventory("UACSMGSelected",0);
			A_SetInventory("MP40Selected",0);
			A_SetInventory("AddonSelected",0);
			A_SetInventory("LostSoulSelected",0);
			A_SetInventory("CantWeaponSpecial",0);
			A_SetInventory("HasBarrel",0);
			A_SetInventory("HasIceBarrel", 0);
			A_SetInventory("HasFlameBarrel",0);
			A_SetInventory("GrabbedBarrel",0);
			A_SetInventory("GrabbedIceBarrel", 0);
			A_SetInventory("GrabbedFlameBarrel",0);
			A_SetInventory("HasIncendiaryWeapon", 0);
			A_SetInventory("HasExplosiveWeapon",0);
			A_SetInventory("HasPlasmaWeapon",0);
			A_SetInventory("HasCutingWeapon",0);
			A_SetInventory("HasFireWeapon",0);
			A_SetInventory("HasAcidWeapon",0);
			A_SetInventory("Grabbing_A_Ledge",0);
			A_SetInventory("CantDoAction",0);
			A_SetInventory("PowerInvulnerable2",0);
			A_SetInventory(wepToken,1);
	}
	
	//Special Modes
	action bool A_IsFiringLeftWeapon()
	{
		return invoker.FiringLeftWeapon;
	}
	
	action void A_SetFiringLeftWeapon(bool type)
	{
		invoker.FiringLeftWeapon = type;
	}
	
	action bool A_IsFiringRightWeapon()
	{
		return invoker.FiringRightWeapon;
	}
	
	action void A_SetFiringRightWeapon(bool type)
	{
		invoker.FiringRightWeapon = type;
	}
	
	
	
	action bool A_CheckAkimbo()
	{
		return invoker.akimboMode;
	}
	
	action void A_SetAkimbo(bool type)
	{
		invoker.akimboMode = type;
	}
		
	
	action string A_GetCurrentFireMode()
	{
		return invoker.fireMode;
	}
	
	action void A_SetCurrentFireMode(string type)
	{
		invoker.fireMode = type;
	}
		
	
	action string A_GetCurrentRifleMode()
	{
		return invoker.upgradedRifleMode;
	}
	
	action void A_SetCurrentRifleMode(string type)
	{
		invoker.upgradedRifleMode = type;
	}
	
	
	action string A_GetCurrentGrenadeType()
	{
		return invoker.lastGrenadeType;
	}
	
	action void A_SetCurrentGrenadeType(string type)
	{
		invoker.lastGrenadeType = type;
	}
	
	action void PB_FireCryoRifleBeam()
	{
		let laserproj = A_FireProjectile("CryoRifleBeam");
		let laser = MWLaser (laserproj);
	}
	
	action string PB_GetCurrentRocketMode()
	{
		return invoker.rocketLauncherMode;
	}
	
	action void PB_SetCurrentRocketMode(string type)
	{
		invoker.rocketLauncherMode = type;
	}

//I know that two functions are messy but hey, they work like wonders.	
//Also, a HUGE thank you to both A_D_M_E_R_A_L and DoomKrakken for showing
//their examples on making the plasma ammo counter! Thanks guys!
//-JMartinez2098
//Edit - Thank you A_D_M_E_R_A_L for trimming down both of the functions into one
	action void PB_SetPRCounter(int layer, name ammotype, name spr, bool isRightDigit = false)
	{
		int amount = CountInv(ammotype);
		int a; //frame number based on ammo count
		let pl_ws = player.GetPSprite(layer);
		if(pl_ws) {
			if(isRightDigit) a = amount % 10;  //check if isRightDigit is true
			else a = amount / 10;
			pl_ws.Sprite = GetSpriteIndex(spr);
			pl_ws.Frame = a;
		}
	}

	action void A_DecideSpawnLaserPuff()
	{
			if (CountInv("LaserSightActivated")==1 && CountInv("KeepLaserDeactivated") != 1)
			{
				//invoker.A_SpawnLaserPuff();
			}
			else 
			{
				invoker.A_DestroyLaserPuff();
			}
	}
	action void A_DestroyLaserPuff()
	{
		if (invoker.laseractor) invoker.laseractor.Destroy();
	}
	action Actor A_SpawnLaserPuff(Double jitteramountX,Double jitteramountY,String DotColor)
	{
		int integer;
		Double DotJitterX, DotJitterY;
		Double FinalAngle, FinalPitch;

		DotJitterX = Frandom(-(jitteramountX),jitteramountX);
		DotJitterY = Frandom(-(jitteramountY),jitteramountY);
		FinalAngle = angle + DotJitterX;
		FinalPitch = Pitch + DotJitterY; 

		[invoker.InvActor, invoker.integer] = LineAttack(Finalangle,4096,Finalpitch,0,'None',"InvisiblePuff",LAF_NORANDOMPUFFZ|LAF_NOINTERACT);
		if (invoker.InvActor)
		{
			invoker.invactorpos = invoker.InvActor.pos;
			invoker.InvActor.Destroy();
		}
		if (!invoker.laseractor) invoker.laseractor = Spawn(DotColor,invoker.invactorpos);
		else invoker.laseractor.SetOrigin(invoker.invactorpos, true);
		
		return invoker.laseractor;
	}
	action int CheckUnloaded(string token)
	{
		if (CountInv(token) >= 1) return PBWEAP_UNLOADED;
		return 0;
	}
	
	// Used for interrupting the hand animation when kicking with melee attacks
	action bool PB_MeleeKickInterruptCheck() {
		if( InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftJab")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftHook")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftUpperCut")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftBackHand")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightJab"))||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightHook")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightUpperCut")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightBackHand"))
		) {
			return true;
		}
		return false;
	}
	
	action bool PB_MeleeAttackKickCheck() 
	{
	
		if( InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftJab")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftHook")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftUpperCut")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("LeftBackHand")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightJab"))||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightHook")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightUpperCut")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("RightBackHand")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("SideKickRight")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("SideKickLeft")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("HookKickLeft")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ThrustKick")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("AirKickCombo")) ||
			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("HookKickRight"))
//			InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("JavelinReadyToFire"))
			
			
		) {
			return false;
		}
		return true;
		
	}
	
	action bool PB_WeaponIsInReadyState()
	{
       		if ( (InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("Ready")) || 
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ReallyReady")) ||
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ReadyToFire"))||
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("Ready2"))||
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("Ready5"))||
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("Ready4"))||
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ReallyReady3"))||
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("Ready3"))||
			  InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("JavelinReady3"))|| //Nailgun Gavelin Mode
			   InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ReadyToFire2"))|| //Hell Rifle Green mode
			   InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ReadyMissile"))|| //LMG Micro Missile mode
			   InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ReadyToFire_Red"))
			 ) 
			 ||
			(InStateSequence(invoker.owner.player.GetPSprite(10).Curstate,invoker.ResolveState("IdleLeft_Overlay")) && 
			 InStateSequence(invoker.owner.player.GetPSprite(11).Curstate,invoker.ResolveState("IdleRight_Overlay")) && 
			 InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("ReadyToFireDualWield")))
		   ){
			
			return true;
		}
		return false;
	}
	
	
	action state A_DoPBWeaponAction(int weapflags = WRF_ALLOWRELOAD, int pbFlags = 0, string unloadtoken = "HasUnloaded", bool noReload = false)
	{
		static const string PBWeapEmptyToken[] = 
		{
			"PB_PistolWasEmpty","RifleWasEmpty","UACSMGWasEmpty"
		};
		static const string PBWeapUnloadedToken[] =
		{
			"HasUnloaded","PulseCannonHasUnloaded", "HasUnloadedRG"
		};
		static const string PBWeapUnloadableClasses [] =
		{
			"PB_Weapon","PulseCannon"
		};
		static const statelabel PBWeapStatelabels[] =
		{
			"Steady", "QuickPunch", //"LedgeClimb",
			"DoKick", "Taunt", "Salute", "Salute",
			"UseEquipment", "SwitchEquipment", "DualWieldBaby",
			"NoDualWield", "WeaponSpecial", "ReadyBarrel", "ReadyBarrel",
			"ReadyFlameBarrel", "ThrowBarrel", "ThrowIceBarrel", 
			"ThrowFlameBarrel", "IdleBarrel", "IdleIceBarrel", 
			"IdleFlameBarrel"
		};
		if (!(pbFlags & PBWEAP_UNLOADED)) pbFlags |= CheckUnloaded(invoker.UnloaderToken);
		if (CountInv("GoFatality")>=1 || PB_executingEnemy())
		{
			return ResolveState("Steady");
		}
		
		if(((PressingFire() || JustPressed(BT_ATTACK)) && !A_IsFiringLeftWeapon()) || ((PressingAltfire() || JustPressed(BT_ALTATTACK)) && !A_IsFiringRightWeapon())){
			if(CountInv("DualFireReload") >= 2){
				A_TakeInventory("DualFireReload",2);
				return ResolveState("Reload");
			}
		}
		
		if (CountInv("GoWeaponSpecialAbility")>=1)
		{
			if (ResolveState("DualWieldBaby")) return ResolveState("DualWieldBaby");
			else if (ResolveState("NoDualWield")) return ResolveState("NoDualWield");
			else return ResolveState("WeaponSpecial");
		}
		if (CountInv("HasBarrel")>=1) 
		{
			return ResolveState("ReadyBarrel");
		}
		if (CountInv("HasFlameBarrel")>=1) 
		{
			return ResolveState("ReadyFlameBarrel");
		}
		if (CountInv("HasIceBarrel")>=1) 
		{
			return ResolveState("ReadyIceBarrel");
		}
		if (CountInv("Unloading")>=1 && ResolveState("Unload") && !(pbFlags & PBWEAP_UNLOADED) && CountInv(invoker.UnloaderToken) != 1)
		{
			return ResolveState("Unload");
		}
		else A_TakeInventory("Unloading", CountInv("Unloading"));
		if (CountInv(invoker.UnloaderToken) >= 1 && !(pbFlags & PBWEAP_UNLOADED) && !InStateSequence(invoker.owner.player.GetPSprite(PSP_WEAPON).Curstate,invoker.ResolveState("GunEmpty")))
		{
			return ResolveState("GunEmpty");
		}
		if (ResolveState("LoadChamber"))
		{
			for (int i = 0; i < PBWeapEmptyToken.Size(); ++i)
			{
				if (CountInv(PBWeapEmptyToken[i]) >= 1)
				{
					return ResolveState("LoadChamber");
				}
			}
		}
		
		if (noReload) {
			A_WeaponReady();
		}
		else {
			A_WeaponReady(weapflags);
		}
		return null;
	}
	
	action void PB_HandleCrosshair(int num)
	{
        CVar crosshair_settings = CVar.FindCVar('pb_weapon_crosshairs');
		
		if(crosshair_settings.GetBool()){
			A_SetCrosshair(num); // Set crosshair to specific weapon
		}
		else {
			A_SetCrosshair(0); // Set crosshair to universal user setting
		}
	}
	
	//weapons should ALWAYS bob, fucking fight me -popguy
	override void DoEffect()
	{
		super.DoEffect();
		let player = owner.player;
		if (player && player.readyweapon)
		{
			player.WeaponState |= WF_WEAPONBOBBING;
		}
	}
	
	action void A_SetOverlaySprite(int layer, String str)
        {
                    let psp = player.GetPSprite(layer);
                    psp.sprite = GetSpriteIndex(str);
        }
  
	action void A_SetWeaponSprite(String str)
        {
                    let psp = player.GetPSprite(PSP_WEAPON);
                  //  let psp = player.GetPSprite(1);
                    psp.sprite = GetSpriteIndex(str);
        }
		
	action void A_SetFlashWeaponSprite(String str)
	{
		let psp = player.GetPSprite(PSP_FLASH);
		psp.sprite = GetSpriteIndex(str);
	}

	action void A_SetSpawnSprite(String str)
	{
	   sprite = GetSpriteIndex(str);
	}
	
	action void LedgeReach(float HeightDecrease)
	{
		let plr = PlayerPawnBase(self);
		plr.LedgeHeightMax = (plr.LedgeHeight - Height * HeightDecrease * 1.0f);
		A_Stop();
		SetOrigin((Pos.X, Pos.Y, plr.LedgeHeightMax), True);
	}
	
	action state PB_RespectIfNeeded()
	{
		Actor own = invoker.owner;
		bool shouldHelmet = ACS_NamedExecuteWithResult("ToggleHelmetAnimation",0,0,0) == 0 && own.CountInv("IntroductionSequence") == 0;
		bool shouldRespect = invoker.respectInventoryItem != "" && own.CountInv(invoker.respectInventoryItem) == 0;
		if (shouldHelmet)
		{
			own.GiveInventory("IntroductionSequence",1);
			own.GiveInventory("CantDoAction",1);
			//Console.printf("Setting State: HelmetAnimation");
			return invoker.resolveState("HelmetAnimation");
		}			
		else if (shouldRespect)
		{
			//Console.printf("Setting State: WeaponRespect");
			own.GiveInventory(invoker.respectInventoryItem,1);
			return invoker.resolveState("WeaponRespect");
		}
		else
		{
			//Console.printf("Setting State: SelectAnimation");
			return invoker.A_Jump(256,"SelectAnimation");
		}
	}
	States
	{
		Select:
		TNT1 A 1 A_Raise;
		Wait;

		Fire:
		Ready:
		SelectAnimation:
			Goto GoingToReady;
		Deselect:
			TNT1 A 1 A_Lower;
			Wait;
		
		InsertBullets_Zscript:
			TNT1 A 0 A_JumpifInventory(invoker.AmmoMag,invoker.MagazineMaxFill,"InsertBullets_Zscript_Stop");
			TNT1 A 0 A_JumpIf(!CountInv(invoker.AmmoPool),"InsertBullets_Zscript_Stop");
			TNT1 A 0 
				{
					A_GiveInventory(invoker.AmmoMag,1);
					A_TakeInventory(invoker.AmmoPool,invoker.TakeGiveResrvAmnt);
				}
			Loop;
		
		RemoveBullets_ZScript:
			TNT1 A 0 A_JumpifInventory(invoker.AmmoMag,1,1);
			Goto InsertBullets_Zscript_Stop;
			TNT1 A 0 
				{
					A_TakeInventory(invoker.AmmoMag,1);
					A_GiveInventory(invoker.AmmoPool,invoker.TakeGiveResrvAmnt);
				}
			Loop;

		InsertBullets_Zscript_Stop:	
			TNT1 A 1;
			Stop;
			
		HelmetAnimation:
			TNT1 A 0
			{
				A_GiveInventory("PowerInvulnerable2",1);
				A_GiveInventory("sae_extcam", 1);
				A_GiveInventory("sae_deathcam", 1);
				A_SetCrosshair(5);
			}
			H3L6 H 1 A_SetBlend("00 00 00", 1, 35, "00 00 00", 0);
			TNT1 A 34 A_StartSound("IronSights",CHAN_AUTO);
			H3L1 ABCDE 1 A_SetRoll(roll+10, SPF_INTERPOLATE);
			TNT1 A 0 A_StartSound("RSUP1",CHAN_AUTO);
			H3L1 FGHIJK 1 A_SetRoll(roll+5, SPF_INTERPOLATE);
			H3L1 LMNOP 1 A_SetRoll(roll-3, SPF_INTERPOLATE);
			//add sound for hand grabbing other side
			H3L1 QRSTUVWXYZ 1;
			H3L2 ABCD 1;
			H3L2 E 1 A_StartSound("IronSights",CHAN_AUTO);
			H3L2 FGHIJKLMNOPQRSTUVWXYZ 1 A_SetRoll(roll-3, SPF_INTERPOLATE);
			H3L3 ABCD 1;
			H3L3 E 1 A_StartSound("IronSights",CHAN_AUTO);
			H3L3 FGHIJ 1 A_SetRoll(roll-1.5, SPF_INTERPOLATE);
			H3L3 JKLMN 1 A_SetRoll(roll+1.5, SPF_INTERPOLATE);
			H3L3 OPQRS 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L3 TUVWXYZ 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L4 ABC 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L4 DEFGH 1 A_SetRoll(roll+3.5, SPF_INTERPOLATE);
			H3L4 I 1
			{
				A_StartSound("helmet/swipe");
				A_SetRoll(roll+2.5, SPF_INTERPOLATE);
			}
			H3L4 JKLMNOP 1 A_SetRoll(roll+2.5, SPF_INTERPOLATE);
			H3L4 Q 1
			{
				A_StartSound("helmet/swipe");
				A_SetRoll(roll+2, SPF_INTERPOLATE);
			}
			H3L4 RSTUVWXYZ 1 A_SetRoll(roll+2, SPF_INTERPOLATE);
			H3L5 ABC 1 A_SetRoll(roll+3, SPF_INTERPOLATE);
			H3L5 DEF 1 A_SetRoll(roll+4, SPF_INTERPOLATE);
			H3L5 GH 1 A_SetRoll(roll+5, SPF_INTERPOLATE);
			H3L5 I 1
			{
				A_StartSound("RSUP2",CHAN_AUTO);
				A_SetRoll(roll+5, SPF_INTERPOLATE);
			}
			H3L5 JKL 1 A_SetRoll(roll+2.5, SPF_INTERPOLATE);
			H3L5 MNO 1 A_SetRoll(roll+1, SPF_INTERPOLATE);
			H3L5 P 1 A_StartSound("marine/superfist6",CHAN_AUTO);
			H3L5 QRS 1;
			H3L5 T 8;
			H3L5 UVXYZ 1;
			TNT1 A 0 A_SetBlend("00 00 00", 0, 8, "00 00 00", 1);
			H3L6 A 1
			{
				A_StartSound("HLMTPUT",CHAN_AUTO);
				A_SetRoll(roll+(frandom(-2,2)), SPF_INTERPOLATE);
			}
			H3L6 BCDEF 1 A_SetRoll(roll+(frandom(-2,2)), SPF_INTERPOLATE);
			H3L6 G 1
			{
				A_StartSound("HLMTBEP",CHAN_AUTO);
				A_SetRoll(roll+(frandom(-2,2)), SPF_INTERPOLATE);
			}
			H3L6 H 8 A_SetBlend("00 00 00", 1, 10, "51 92 99", 1);
			TNT1 A 1 A_StartSound("HLMTBPP",CHAN_AUTO);
			TNT1 A 20 A_SetBlend("51 92 99", 1, 20, "51 92 99", 0);
			TNT1 A 0
			{
				A_TakeInventory("PowerInvulnerable2",1);
				A_TakeInventory("sae_extcam", 1);
				A_TakeInventory("sae_deathcam", 1);
				A_TakeInventory("CantDoAction",1);
			}
			TNT1 A 0 A_Raise(9999);
			TNT1 A 0 A_Jump(256,"SelectAnimation");
			Goto Ready3;
		WeaponRespect:
		Ready3:
			TNT1 A 1 A_Jump(255, "Ready3");
			Loop;	
		
		Flash:
			TNT1 A 1;
			Stop;
			
		StainedLedgeClimb:
			3L1M A 0 A_JumpIfInventory("PowerGreenBloodOnVisor",1,4);
			2L1M A 0 A_JumpIfInventory("PowerBlueBloodOnVisor",1,3);
			1L1M A 0 A_JumpIfInventory("PowerBloodOnVisor",1,2);
		LedgeClimb:
			CL1M A 0;
			"####" A 0 {
				A_StopSound(1);
				A_StopSound(5);
				A_StopSound(6);
				A_StopSound(7);
				A_TakeInventory("CantDoAction",1);
				A_TakeInventory("PowerInvulnerable2",1);
				A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);
				A_ClearOverlays(-80, 80);
				A_Stop();
				A_ZoomFactor(1.0);
				A_GunFlash("LedgeGrabFlash");
				A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
				SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
				A_StartSound("ledgeclimb",5);
			}
			"####" ABC 1 {
				let plr = PlayerPawnBase(self);
				
				if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
					//plr.velz--;
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				{
					LedgeReach(0.751);
					return ResolveState("LedgeReach");
				}
				return ResolveState(null);
			}
		LedgeReach:
		    "####" A 0 A_ClearOverlays(-80,80);
			"####" A 0 A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);
			"####" D 1 {
				let plr = PlayerPawnBase(self);
				//if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f) && Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					SetInventory("Grabbing_A_Ledge",1); //SetInventory fixes the looping ledge grab bug when sv_unlimited_pickup 1 is on
					LedgeReach(0.751);
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
				}
			}
			"####" A 0 A_JumpIf(CountInv("Grabbing_A_Ledge")==1, 1);
			Goto LedgeReach;
			
			"####" E 1 {
			    A_ClearOverlays(-80,80);
				let plr = PlayerPawnBase(self);
				plr.velz = 3.6;
				A_SetPitch(0, SPF_INTERPOLATE);
				LedgeReach(0.751);
				A_StopSound(CHAN_WEAPON);
				plr.LedgeAngle = Angle;
				plr.LedgeCheck = False;
				plr.LedgeGrabbed = True;
			}
			"####" F 1 {
				A_SetPitch(pitch-0.5, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, 0.62) : (0, 0, 0);
			}
			"####" G 1 {
				let plr = PlayerPawnBase(self);
				A_SetPitch(pitch+3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" HI 1 {
				let plr = PlayerPawnBase(self);
				A_SetPitch(pitch+4, SPF_INTERPOLATE);
				plr.velz += 0.5;
				
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
		FinishClimb:
			3L1M A 0 A_JumpIfInventory("PowerGreenBloodOnVisor",1,4);
			2L1M A 0 A_JumpIfInventory("PowerBlueBloodOnVisor",1,3);
			1L1M A 0 A_JumpIfInventory("PowerBloodOnVisor",1,2);
			CL1M A 0;
			"####" A 0 {
			    A_ClearOverlays(-80,80);
				A_OverlayFlags(1,PSPF_PLAYERTRANSLATED, false);				
				A_GunFlash("LedgeGrabFlash");
			}
			"####" JK 1 {
				let plr = PlayerPawnBase(self);
				plr.velz = 3.6;
				A_SetPitch(pitch-3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" LM 1 A_SetPitch(pitch-2, SPF_INTERPOLATE);
			TNT1 AA 1 {
				A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
				A_WeaponReady();
			}
			//TNT1 A 0 A_Overlay(-10, "FirstPersonLegsStand");
			// New, and to prevent an issue with melee not working after climbing during it's animation
			TNT1 A 0 {
				PB_SetUsingKick(false);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				PB_SetExecutingEnemy(false);
				A_SetPitch(0, SPF_INTERPOLATE);
				SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			 	SetInventory("Grabbing_A_Ledge", 0);
			}
			TNT1 A 0 A_Jump(256,"SelectAnimation");
			Goto Ready3;
		Equipment_Toggle_Handler_Overlay:
			TNT1 A 1 {
			
			if (CountInv("ToggleEquipment")==1) 
				return ResolveState("SwitchEquipment");
			return ResolveState(null);
			}
			Loop;
		Melee_Equipment_Handler_Overlay:
			TNT1 A 1 {
				
				if(PressingUser1() && !PB_usingMelee() && !PB_executingEnemy() && !PB_usingEquipment() &&
				!CheckInventory("GoFatality",1) && !CheckInventory("CantDoAction",1)) 
				{
					A_OverlayOffset(PSP_WEAPON, 0, 32);
					PB_SetUsingEquipment(true);
					A_Overlay(PSP_WEAPON, "UseEquipment");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
				}
			
				if(JustPressed(BT_USER2) && !PB_usingMelee() && !PB_executingEnemy() && !PB_usingEquipment() && !CheckInventory("Zoomed", 1)
				&& !CheckInventory("GoFatality",1) && !CheckInventory("CantDoAction",1)) 
				{
					A_OverlayOffset(PSP_WEAPON, 0, 32);
					PB_SetUsingMelee(true);
					A_Overlay(PSP_WEAPON, "QuickMelee");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
				}
			}
			Loop;
		KickHandler_Overlay:
			TNT1 A 1 {
				if(JustPressed(BT_USER4) && !PB_usingKick() && !PB_executingEnemy() && !CheckInventory("Zoomed", 1) && PB_MeleeAttackKickCheck() &&
				!CheckInventory("GoFatality",1)) 
				{
					PB_SetUsingKick(true);
					A_OverlayOffset(-999, 0, 32);
					A_Overlay(-999, "DoKick");
					A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, true);
				}
			}
			Loop;
		// Initialize Weapon upon selection
		GoingToReady:
			TNT1 A 0 A_JumpIfInventory ("HasBarrel", 1, "ReadyBarrel");
			TNT1 A 0 A_JumpIfInventory ("HasFlameBarrel", 1, "ReadyFlameBarrel");
			TNT1 A 0 A_JumpIfInventory ("HasIceBarrel", 1, "ReadyIceBarrel");
		SelectingAnimation:
			TNT1 A 0 {
				A_TakeInventory("KeepLaserDeactivated",1);
				A_TakeInventory("DoGrenade",1);
				A_TakeInventory("IsRunning",1);
				A_TakeInventory("Reloading",1);
				A_Overlay(-10, "FirstPersonLegsStand");
				
				// New 
				PB_SetUsingKick(false);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				PB_SetExecutingEnemy(false);
				
			}
			TNT1 A 0 A_Jump(255,"Ready4");
			TNT1 AAAA 1 A_Jump(255, "Ready3");
			Loop;
		SelectFirstPersonLegs:
			TNT1 A 0 {
				A_StopSound(1);
				A_StopSound(CHAN_VOICE);
				A_StopSound(5);
				A_StopSound(6);
				A_StopSound(7);
				A_TakeInventory("Spin",1);
				A_TakeInventory("CantWeaponSpecial",1); //Fixes bug with Weapon Special Key no longer working when changing SGL grenade type or RL missile mode
				A_TakeInventory("MG42Selected",1); //Take this token on every weapon that's not the MG42.
				A_SetInventory("Grabbing_A_Ledge", 0); //Fixed bug where movement is locked when vaulting after entering a level
				A_Takeinventory("RandomHeadExploder",1);
				A_TakeInventory("DualFireReload",2);
				A_Overlay(-777, "Melee_Equipment_Handler_Overlay");
				A_Overlay(-778, "KickHandler_Overlay");
				A_Overlay(-779, "Equipment_Toggle_Handler_Overlay");
				A_Overlay(-10, "FirstPersonLegsStand");
			}
			TNT1 A 0 A_Jump(255, "SelectContinue");
			Loop;
		TryToSelectDrum:
			TNT1 AAAA 1 A_Jump(255, "Ready3");
			TNT1 AAAA 1 A_Jump(255, "BeltReady");
			Loop;
		GoingToReady2:
			TNT1 A 0 {
				A_TakeInventory("KeepLaserDeactivated",1);
				A_TakeInventory("ToggleEquipment",1);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				A_Overlay(-10, "FirstPersonLegsStand");
			}
			TNT1 A 0 A_JumpIfInventory("SawSelected", 1, "OnLoop");
			TNT1 AAAA 0 A_Jump(256, "SelectAnimation");
			TNT1 AAAA 1 A_Jump(256, "Ready");
			Loop;
			
		Steady:
			TNT1 A 1 {
				// New 
				PB_SetUsingKick(false);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				PB_SetExecutingEnemy(false);
			}
			Goto GoingToReady;
		FirstPersonLegsKickRight:
			STAN A 0;
			"####" A 0 A_GiveInventory("KeepLaserDeactivated",1);
			"####" A 0 A_JumpIf(Height < 54, "FirstPersonLegsHide");
			"####" A 0 A_JumpIfInventory("FPSLegChecker", 1, 2);
			"####" O 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
			"####" P 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsKickLeft:
			STAL A 0;
			"####" A 0 A_GiveInventory("KeepLaserDeactivated",1);
			"####" A 0 A_JumpIf(Height < 54, "FirstPersonLegsHide");
			"####" A 0 A_JumpIfInventory("FPSLegChecker", 1, 2);
			"####" P 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
			"####" O 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsHide:
			"####" Q 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsStand:
			TNT1 A 0 A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk1");
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(Height < 54, "FirstPersonLegsCrouch");
			TNT1 A 0 A_JumpIfInventory("FPSLegChecker", 1, 2);
			STAN A 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
			TNT1 A 0 A_JumpIf(Height < 54, "FirstPersonLegsCrouch");
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			STAN M 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsCrouch:
			TNT1 A 0 A_StartSound("IronSights", 0); //Sound when player crouches
		FirstPersonLegsCrouchContinue:
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIf(vel.x > 0.8 || vel.x < -0.8 || vel.y > 0.8 || vel.y < -0.8, "FirstPersonLegsWalk1");
			TNT1 A 0 A_JumpIf(Height > 54, "FirstPersonLegsStand");
			STAN N 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Loop;
		FirstPersonLegsWalk1:
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_JumpIfInventory("FPSLegChecker", 1, "FirstPersonLegsWalk2");
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_GiveInventory("FPSLegChecker",1);
			STAN BCCDDEEFF 1
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
				return A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			}
			Goto FirstPersonLegsStand;
		FirstPersonLegsWalk2:
			TNT1 A 0 A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			TNT1 A 0 A_TakeInventory("FPSLegChecker",1);
			STAN GHHIIJJKLL 1 
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
				return A_JumpIf(vel.z != 0, "FirstPersonLegsJump");
			}
			Goto FirstPersonLegsStand;
		FirstPersonLegsJump:
			STAN I 5
			{
				A_OverlayFlags(-10, PSPF_ADDWEAPON, False);
				A_OverlayFlags(-10, PSPF_PLAYERTRANSLATED, True);
				A_OverlayOffset(-10, 0, (-pitch*2)+230);
				if(PB_executingEnemy())
					A_SetOverlaySprite(-10, "TNT1");
			}
			Goto FirstPersonLegsStand;
		//NEW EQUIPMENT SYSTEM
		UseEquipment:
			TNT1 A 0 A_JumpIfInventory("CantDoAction",1,"FailOverlay");
			TNT1 A 0 A_JumpIfHealthLower(0, "FailOverlay");
			TNT1 A 0 {
				A_ClearOverlays(-10,65);
				A_GunFlash("Null"); //Fixes the Minigun heat overlay oversight
				A_TakeInventory("Zoomed", 1);
				A_TakeInventory("RailgunInfrared", 1);
				A_Zoomfactor(1.0);
				A_GiveInventory("KeepLaserDeactivated",1);
				A_StopSound(CHAN_WEAPON);
				A_StopSound(CHAN_VOICE);
				A_StopSound(CHAN_6);
				A_StopSound(CHAN_7);
				A_TakeInventory("UseEquipment", 1);
				A_GiveInventory("KeepLaserDeactivated",1);
			}
			TNT1 A 0 A_JumpIfInventory ("GrabbedBarrel", 1, "IdleBarrel");
			TNT1 A 0 A_JumpIfInventory ("GrabbedFlameBarrel", 1, "IdleFlameBarrel");
			TNT1 A 0 A_JumpIfInventory ("GrabbedIceBarrel", 1, "IdleIceBarrel");
			TNT1 A 0 A_JumpIfInventory("FragGrenadeSelected", 1, "ThrowGrenade");
			TNT1 A 0 A_JumpIfInventory("ProximityMineSelected", 1, "ThrowMine");
			TNT1 A 0 A_JumpIfInventory("StunGrenadeSelected", 1, "ThrowStun");
			TNT1 A 0 A_JumpIfInventory("LeechSelected", 1, "ThrowLeech");
			TNT1 A 0 A_JumpIfInventory("RevGunSelected", 1, "FireRevGun");
			//More stuff to come.....
			Goto GoingToReady;
		WheelCancelEquipment:
			TNT1 A 0
				{
				A_SetInventory("WW_ProximityMineSelected",0);
				A_SetInventory("WW_StunGrenadeSelected",0);
				A_SetInventory("WW_LeechSelected",0);
				A_SetInventory("WW_FragGrenadeSelected",0);
				A_SetInventory("WW_RevGunSelected",0);
				A_SetInventory("CantWeaponSpecial",0);
				}
			goto Equipment_Toggle_Handler_Overlay;
		SwitchEquipment:	
			TNT1 A 0 A_TakeInventory("ToggleEquipment", 1);
			TNT1 A 0 {
				if(CountInv("WW_ProximityMineSelected") && CountInv("ProximityMineSelected") >=1)
					{A_Print("Equipment already selected: Proximity Mine"); return ResolveState("WheelCancelEquipment");}
				if(CountInv("WW_StunGrenadeSelected") && CountInv("StunGrenadeSelected") >=1)
					{A_Print("Equipment already selected: Stun Grenade"); return ResolveState("WheelCancelEquipment");}
				if(CountInv("WW_LeechSelected") && CountInv("LeechSelected") >=1)
					{A_Print("Equipment already selected: Leech"); return ResolveState("WheelCancelEquipment");}
				if(CountInv("WW_FragGrenadeSelected") && CountInv("FragGrenadeSelected") >=1)
					{A_Print("Equipment already selected: Frag Grenade"); return ResolveState("WheelCancelEquipment");}
				if(CountInv("WW_RevGunSelected") && CountInv("RevGunSelected") >=1)
					{A_Print("Equipment already selected: Revenant Launcher"); return ResolveState("WheelCancelEquipment");}
				if(CountInv("WW_ProximityMineSelected") >=1)
					{
					if(CountInv("MineAmmo") <=0)
						{A_Print("No Mines Available"); return ResolveState("WheelCancelEquipment");}
					}
				if(CountInv("WW_StunGrenadeSelected") >=1)
					{
					if(CountInv("StunGrenadeAmmo") <=0)
						{A_Print("No Stun Grenades Available"); return ResolveState("WheelCancelEquipment");}
					}
				if(CountInv("WW_LeechSelected") >=1)
					{
					if(CountInv("HasLeech") <=0)
						{A_Print("No Leech Available"); return ResolveState("WheelCancelEquipment");}
					}
				if(CountInv("WW_RevGunSelected") >=1)
					{
					if(CountInv("MiniHellRocketAmmo") <=0)
						{A_Print("No Revenant Launcher Available"); return ResolveState("WheelCancelEquipment");}
					}
				if(CountInv("WW_FragGrenadeSelected") >=1)
					{
					if(CountInv("HandGrenadeAmmo") <=0)
						{A_Print("No Frag Grenades Available"); return ResolveState("WheelCancelEquipment");}
					}
				return ResolveState(null);
				}
			TNT1 A 0 
				{
					if(CountInv("WW_ProximityMineSelected") >=1)
						{ 
							A_Print("Equipment Selected: Proximity Mine"); 
							A_SetInventory("ProximityMineSelected",1);
							A_SetInventory("StunGrenadeSelected",0);
							A_SetInventory("LeechSelected",0);
							A_SetInventory("RevGunSelected",0);
							A_SetInventory("FragGrenadeSelected",0);
							A_StartSound("GRNPIN", 3);
							return ResolveState("WheelCancelEquipment");
						}
					if(CountInv("WW_StunGrenadeSelected") >=1)
						{ 
							A_Print("Equipment Selected: Stun Grenade"); 
							A_SetInventory("ProximityMineSelected",0);
							A_SetInventory("StunGrenadeSelected",1);
							A_SetInventory("LeechSelected",0);
							A_SetInventory("RevGunSelected",0);
							A_SetInventory("FragGrenadeSelected",0);
							A_StartSound("GRNPIN", 3);
							return ResolveState("WheelCancelEquipment");
						}
					if(CountInv("WW_LeechSelected") >=1)
						{ 
							A_Print("Equipment Selected: Leech"); 
							A_SetInventory("ProximityMineSelected",0);
							A_SetInventory("StunGrenadeSelected",0);
							A_SetInventory("LeechSelected",1);
							A_SetInventory("RevGunSelected",0);
							A_SetInventory("FragGrenadeSelected",0);
							A_StartSound("GRNPIN", 3);
							return ResolveState("WheelCancelEquipment");
						}
					if(CountInv("WW_RevGunSelected") >=1)
						{ 
							A_Print("Equipment Selected: Revenant Launcher"); 
							A_SetInventory("ProximityMineSelected",0);
							A_SetInventory("StunGrenadeSelected",0);
							A_SetInventory("LeechSelected",0);
							A_SetInventory("RevGunSelected",1);
							A_SetInventory("FragGrenadeSelected",0);
							A_StartSound("REVUP", 3);
							return ResolveState("WheelCancelEquipment");
						}
					if(CountInv("WW_FragGrenadeSelected") >=1)
						{ 
							A_Print("Equipment Selected: Frag Grenade"); 
							A_SetInventory("ProximityMineSelected",0);
							A_SetInventory("StunGrenadeSelected",0);
							A_SetInventory("LeechSelected",0);
							A_SetInventory("RevGunSelected",0);
							A_SetInventory("FragGrenadeSelected",1);
							A_StartSound("GRNPIN", 3);
							return ResolveState("WheelCancelEquipment");
						}
				return ResolveState(null);
				}
			goto Equipment_Toggle_Handler_Overlay;
		LeechBeam:
			SYNP WXYZWXYZWXYZ 1 BRIGHT;
			SYNP WXYZWXYZWXYZ 1 BRIGHT;
			SYNP WXYZWXYZWXYZ 1 BRIGHT;
			SYNP WXYZWXYZWXYZ 1 BRIGHT;
			stop;
		ThrowLeech:
			TNT1 A 0 {
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSMode", 1);
				A_TakeInventory("UseEquipment", 1);
			}
			TNT1 A 0 A_JumpIfInventory("Demonpower", 100, 2);
			TNT1 A 0 A_Print("Need more Demon Energy");
			Goto GoingToReady;
			TNT1 A 0 A_StartSound("SiphonGrowl");
			SYNP GHIJGHIHIJGJIHG 2;
			SYNP G 1 Offset(-2,40);
			SYNP H 1 Offset(-4,50);
			SYNP I 1 Offset(-6,60);
			SYNP J 1 Offset(-8,70);
			TNT1 A 0 Offset(0,32);
			SYNP KLMNO 1;
			TNT1 A 0 A_Overlay(-5, "LeechBeam");
			TNT1 A 0 A_StartSound("SiphonActive", 3);
			TNT1 A 0 A_TakeInventory("Demonpower", 100);
			SYNP ABCDEF 2 A_FireBullets (0, 0, -1, 3, "SiphonPuff", FBF_NORANDOM);
			SYNP ABCDEF 2 A_FireBullets (0, 0, -1, 3, "SiphonPuff", FBF_NORANDOM);
			SYNP ABCDEF 2 A_FireBullets (0, 0, -1, 3, "SiphonPuff", FBF_NORANDOM);
			SYNP ABCDEF 2 A_FireBullets (0, 0, -1, 3, "SiphonPuff", FBF_NORANDOM);
			SYNP ONMLK 1;
			TNT1 A 0 {
				A_WeaponOffset(0,32);
				A_TakeInventory("UseEquipment", 1);
				A_TakeInventory("ToggleEquipment", 1);
			}
			Goto GoingToReady2;
		ThrowStun:
			TNT1 A 0 {
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSMode", 1);
				A_TakeInventory("UseEquipment", 1);
			}
			TNT1 A 0 A_JumpIfInventory("StunGrenadeAmmo", 1, 2);
			TNT1 A 0 A_Print("No Stun Grenades left");
			Goto GoingToReady;
			STNG BCDEF 1;
			STNG F 1 Offset(-2,34);
			TNT1 A 0 A_StartSound("StunGrenadeArm", 2);
			STNG GIJJJIHGKLMNOP 1;
			
			HND1 I 1 A_StartSound("THRGRN", 1);
			TNT1 A 0 A_TakeInventory("StunGrenadeAmmo", 1);
			HND1 J 1 A_FireProjectile("ThrownStunGrenade");
			HND1 KLMNOPQ 1;
			TNT1 A 0 {
				A_TakeInventory("UseEquipment", 1);
				A_TakeInventory("ToggleEquipment", 1);
			}
			Goto GoingToReady2;
		FireRevGun:
			TNT1 A 0 {
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSMode", 1);
				A_TakeInventory("UseEquipment", 1);
			}
			TNT1 A 0 A_JumpIfInventory("MiniHellRocketAmmo", 1, 2);
			TNT1 A 0 A_Print("No Revenant Launcher Ammo");
			Goto GoingToReady;
			TNT1 A 0 {
				A_TakeInventory("MiniHellRocketAmmo", 1);
				A_StartSound("revup");
			}
			RVCA ABCDEFGHIJK 1;
			RVCF AB 1;
			RVCF C 1 {
				A_AlertMonsters();
				A_FireProjectile("Alerter",0,0,-1,0);
				A_ZoomFactor(0.98);
				A_StartSound("hellishmissle/fire", 1);
			}
			RVCF D 1 BRIGHT A_FireProjectile("DoomerRevenantSeeker3", random(4,-4), 0, -8, 0);
			RVCF E 1 BRIGHT {
				A_ZoomFactor(0.975);
				A_StartSound("hellishmissle/fire", 2);
				A_FireProjectile("ShakeYourAss");
				A_FireProjectile("DoomerRevenantSeeker2", random(4,-4), 0, 8, 0);
			}
			RVCF FG 1 BRIGHT;
			RVCF H 1 A_ZoomFactor(1.0);
			RVCF C 1;
			RVCF D 1 BRIGHT A_FireProjectile("DoomerRevenantSeeker3", random(4,-4), 0, -8, 0);
			RVCF E 1 BRIGHT {
				A_ZoomFactor(0.975);
				A_StartSound("hellishmissle/fire", 2);
				A_FireProjectile("ShakeYourAss");
				A_FireProjectile("DoomerRevenantSeeker2", random(4,-4), 0, 8, 0);
			}
			RVCF FG 1 BRIGHT;
			RVCF H 1 A_ZoomFactor(1.0);
			RVCF C 1;
			RVCF D 1 BRIGHT A_FireProjectile("DoomerRevenantSeeker3", random(4,-4), 0, -8, 0);
			RVCF E 1 BRIGHT {
				A_ZoomFactor(0.975);
				A_StartSound("hellishmissle/fire", 2);
				A_FireProjectile("ShakeYourAss");
				A_FireProjectile("DoomerRevenantSeeker2", random(4,-4), 0, 8, 0);
			}
			RVCF FG 1 BRIGHT;
			RVCF H 1 A_ZoomFactor(1.0);
			RVCF C 1;
			RVCF D 1 BRIGHT A_FireProjectile("DoomerRevenantSeeker3", random(4,-4), 0, -8, 0);
			RVCF E 1 BRIGHT {
				A_ZoomFactor(0.975);
				A_StartSound("hellishmissle/fire", 2);
				A_FireProjectile("ShakeYourAss");
				A_FireProjectile("DoomerRevenantSeeker2", random(4,-4), 0, 8, 0);
			}
			RVCF FG 1 BRIGHT;
			RVCF H 1 A_ZoomFactor(1.0);
			RVCF IBA 1;
			RVCA K 1 A_StartSound("revcyc");
			RVCA JIHGFEDCB 1;
			RVCA A 1 {
				A_TakeInventory("UseEquipment", 1);
				A_TakeInventory("ToggleEquipment", 1);
			}
			Goto GoingToReady2;
		ThrowGrenade:
			TNT1 A 0 {
				A_StopSound(6);
				A_StopSound(CHAN_VOICE);
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSMode", 1);
				A_TakeInventory("UseEquipment", 1);
			}
			TNT1 A 0 A_JumpIfInventory("HandGrenadeAmmo", 1, 2);
			TNT1 A 0 A_Print("No Grenades left");
			Goto GoingToReady;
			TNT1 A 0 A_Giveinventory("PlayerIsThrowingAGrenade",1);
			HNDF ABCDE 1 A_SetRoll(roll+2.0, SPF_INTERPOLATE);
			HNDF FGHI 1 {
				A_SetRoll(roll+2.0, SPF_INTERPOLATE);
				if(JustPressed(BT_USER1)) A_GiveInventory("UseEquipment",1);
				}
			TNT1 A 0 A_StartSound("OPNGRN",0);
			HNDF JKLMNOPQR 1 {
				A_SetRoll(roll+2.0, SPF_INTERPOLATE);
				if(JustPressed(BT_USER1)) A_GiveInventory("UseEquipment",1);
				}
			TNT1 A 0 A_JumpIfInventory("UseEquipment", 1, "TossGrenade");
			TNT1 A 1 A_SetRoll(roll-18.0);
			HND1 I 1 A_StartSound("THRGRN",0);
			HND1 J 1 {
				A_FireProjectile("ThrownGrenade30");
				A_TakeInventory("HandGrenadeAmmo", 1);
				A_FireProjectile("Alerter");
			}
			HND1 KLMNOPQ 1 A_SetRoll(roll-5.0);
			TNT1 A 0 {
			A_SetRoll(0, SPF_INTERPOLATE);
			A_TakeInventory("UseEquipment", 1);
			A_TakeInventory("ToggleEquipment", 1);
			A_TakeInventory("PlayerIsThrowingAGrenade", 1);
			}
			Goto GoingToReady2;
		TossGrenade:
			TNT1 A 1;
			HND1 RSTU 1 A_SetRoll(roll-1.5, SPF_INTERPOLATE);
			TNT1 A 0 {
				A_StartSound("THRGRN", 1);
				A_TakeInventory("HandGrenadeAmmo", 1);
				A_FireProjectile("Alerter");
				A_FireProjectile("ThrownGrenade15", 0,0,0,-2,0,3);
			}
			HND1 VWXY 1 A_SetRoll(roll-1.5, SPF_INTERPOLATE);
			TNT1 A 0 {
				A_SetRoll(0);
				A_TakeInventory("PB_LockScreenTilt",1);
				A_TakeInventory("UseEquipment", 1);
				A_TakeInventory("ToggleEquipment", 1);
				A_TakeInventory("PlayerIsThrowingAGrenade", 1);
			}
			Goto GoingToReady2;
		ThrowMine:
			TNT1 A 0 {
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSMode", 1);
				A_TakeInventory("UseEquipment", 1);
			}
			TNT1 A 0 A_JumpIfInventory("MineAmmo", 1, 2);
			TNT1 A 0 A_Print("No Land Mines left");
			Goto GoingToReady;
			XPFF FEDCBA 1;
			XPFS B 4 A_StartSound("weapons/pbarm", 2);
			XHFF A 0 {
				A_StartSound("MINE002", 3);
				A_ThrowGrenade("ThrownProxMine",4,11,1,0);
				A_TakeInventory("MineAmmo", 1);
			}
			XHFF MNOPQRSTUVWXYZ 1;
			TNT1 A 0 {
				A_TakeInventory("UseEquipment", 1);
				A_TakeInventory("ToggleEquipment", 1);
			}
			Goto GoingToReady2;
		
		// The quick melee is going to be reworked, knife combos are tacky and bloat the code
		// The quick melee should have a primary purpose of executing enemies or finishing them off to the point where they can be executed
		QuickMelee:
			#### A 0 {
				A_StopSound(CHAN_WEAPON);
				A_StopSound(CHAN_VOICE);
				A_StopSound(CHAN_6);
				A_StopSound(CHAN_7);
			}
			TNT1 A 0 A_JumpIfInventory("CantDoAction",1,"FailOverlay");
			TNT1 A 0 A_JumpIfHealthLower(0, "FailOverlay");
			TNT1 A 0 {
				A_ClearOverlays(-10,65);
				A_Gunflash("Null");
			}
			#### AAA 0 PB_Execute(); // Check if monster can be executed, jump to execution handler instead
		GoMeleeInstead:
			TNT1 A 0 {
				A_Overlay(PSP_FLASH, "FlashPunching");
				A_GiveInventory("HasCutingWeapon", 1);
				A_TakeInventory("Zoomed",1);
				A_ZoomFactor(1.0);
				A_TakeInventory("ADSmode",1);
				A_StartSound("KNIFSWNG", 1);
			}
			MC3S AB 1 {
				if(JustPressed(BT_USER2)) return PB_Execute();
				return ResolveState(null);
			}
			MC3S C 1 {
				if(JustPressed(BT_USER2)) return PB_Execute();
				return ResolveState(null);
			}
			MC3S D 1 {
				if(JustPressed(BT_USER2)) return PB_Execute();
				return ResolveState(null);
			}
			TNT1 A 0 {
			if(CountInv("PowerStrength") == 1) A_FireProjectile("SuperKnifeSwing");
			else A_FireProjectile("KnifeSwing");
			}
			MC3S EFGHIJ 1 {
				if(JustPressed(BT_USER2)) return PB_Execute();
				return ResolveState(null);
			}
			TNT1 AAAA 1 {
				if(JustPressed(BT_USER2)) return PB_Execute();
				return ResolveState(null);
			}
			TNT1 A 0 {
				A_TakeInventory("KnifeHasHit",1);
				A_TakeInventory("HasCutingWeapon", 1);
				PB_SetUsingMelee(false);
			}
			TNT1 A 0 A_JumpIfInventory("GrabbedBarrel", 1, "IdleBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, "IdleFlameBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, "IdleIceBarrel");
			Goto Ready3;
		//Kicks
		DoKick:
			TNT1 A 0 A_JumpIfInventory("PlayerIsDead",1,"FailOverlay");
			TNT1 A 0 A_JumpIfHealthLower(0, "FailOverlay");
			TNT1 A 0 {
				A_Overlay(-10, "FirstPersonLegsKickRight");
				A_TakeInventory("Zoomed",1);
				A_TakeInventory("ADSmode",1);
				A_ZoomFactor(1.0);
				A_GiveInventory("Kicking",1);
				}
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
			TNT1 A 0 A_JumpIfInventory("CanSlideKick", 1, "SlideKick");
			TNT1 A 0 A_JumpIf (vel.Z != 0, "AirKick");
			TNT1 A 0 A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, true);
			KIC1 A 1 {
				A_StartSound("KICK",0);
				SetPlayerProperty(0,1,0);
				if(CountInv("GrabbedBarrel") == 1 || CountInv("GrabbedIceBarrel") == 1 || CountInv("GrabbedFlameBarrel") == 1)
					A_Overlay(PSP_WEAPON, "FlashBarrelKicking");
				else if(PB_WeaponIsInReadyState())
				{
					A_Overlay(PSP_WEAPON, "FlashKicking");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
					A_GunFlash("Null");
				}
				A_SetAngle(-0.5 + angle, SPF_INTERPOLATE);
				A_SetPitch(+0.5 + pitch, SPF_INTERPOLATE);
				A_SetRoll(roll-2);
				A_ZoomFactor(0.98);
				}
			KIC1 B 1 {
				A_SetAngle(-0.5 + angle, SPF_INTERPOLATE);
				A_SetPitch(+0.5 + pitch, SPF_INTERPOLATE);
				A_SetRoll(roll-2);
				A_ZoomFactor(0.970);
				}
			KIC1 C 1 {
				A_SetAngle(-0.5 + angle, SPF_INTERPOLATE);
				A_SetPitch(+0.5 + pitch, SPF_INTERPOLATE);
				A_SetRoll(roll-2);
				A_ZoomFactor(0.965);
			}
			KIC1 D 1 { 
				A_SetPitch(+1.25 + pitch, SPF_INTERPOLATE);
				A_ZoomFactor(0.950);
				}
			KIC1 E 1 A_Recoil(-1);
			KIC1 F 1 { //No more unneeded Super states here, this now unified into a single state with an if else statement.
				if(CountInv("PowerStrength") == 1) A_FireProjectile("SuperKickAttack", 0, 0, 0, -7);
				else A_FireProjectile("KickAttack", 0, 0, 0, -7);
			}
			KIC1 GG 1;
			KIC1 I 1 {
				A_ZoomFactor(0.965);
				A_SetAngle(+1 + angle, SPF_INTERPOLATE);
				A_TakeInventory("Kicking",1);
				}
			KIC1 H 1 {
				A_SetPitch(-0.5 + pitch, SPF_INTERPOLATE);
				A_SetAngle(+1 + angle, SPF_INTERPOLATE);
				A_SetRoll(roll+2);
				A_ZoomFactor(0.970);
			}
			KIC1 J 1 {
				A_SetPitch(-0.5 + pitch, SPF_INTERPOLATE);
				A_SetRoll(roll+2);
				A_SetAngle(+0.5 + angle, SPF_INTERPOLATE);
				A_ZoomFactor(0.98);
				}
			KIC1 K 1 {
				A_SetPitch(-0.5 + pitch, SPF_INTERPOLATE);
				A_SetRoll(roll+2);
				A_SetAngle(+0.5 + angle, SPF_INTERPOLATE);
				A_ZoomFactor(0.99);
			}
			KIC1 L 1 {
				A_SetAngle(+0.5 + angle, SPF_INTERPOLATE);
				A_SetPitch(-0.5 + pitch, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				}
			KIC1 A 1 {
				A_SetAngle(-0.5 + angle, SPF_INTERPOLATE);
				A_SetPitch(-1.25 + pitch, SPF_INTERPOLATE);
				SetPlayerProperty(0,0,0);
				PB_SetUsingKick(false);
			}
			TNT1 A 0 {
				A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, false);
				A_Overlay(-10, "FirstPersonLegsStand");
			}
			Stop;
		FailOverlay:
			TNT1 A 0 {
				A_StopSound(CHAN_WEAPON);
				A_StopSound(CHAN_VOICE);
				A_StopSound(CHAN_6);
				A_StopSound(CHAN_7);
			}
			TNT1 A 0 A_JumpIfInventory("CantDoAction",1,1);
			Goto StopFail;
			TNT1 A 0 A_JumpIf(invoker.Health > 0, 2);
			TNT1 A 1 {
				PB_SetUsingKick(false);
				PB_SetUsingMelee(false);
				PB_SetUsingEquipment(false);
				PB_SetExecutingEnemy(false);
				}
			Loop;
		StopFail:
			TNT1 A 1 A_SetInventory("CantDoAction",0);
			Stop;
		SlideKick:
			TNT1 A 0 {
				A_GiveInventory("KeepLaserDeactivated",1);
				A_GiveInventory("IsSlideKicking", 1);
				if(CountInv("GrabbedBarrel") == 1 || CountInv("GrabbedIceBarrel") == 1 || CountInv("GrabbedFlameBarrel") == 1)
					A_Overlay(PSP_WEAPON, "FlashBarrelSlideKicking");
				else if(PB_WeaponIsInReadyState())
				{
					A_Overlay(PSP_WEAPON, "FlashSlideKicking");
					A_GunFlash("Null");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
				}
				A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, true);
				}
			SLDK A 1 A_ZoomFactor(0.90);
			SLDK B 1 A_ZoomFactor(0.85);
			SLDK C 1 A_ZoomFactor(0.80);
			SLDK D 1 A_ZoomFactor(0.75);
			SLDK EF 1;
			TNT1 A 0 A_JumpIf(Height > 54, "LowerKick");
			TNT1 A 0 A_JumpIfInventory("KickHasHitAnObject", 1, "LowerKick");
			SLDK GHIJKLMNMLKJ 1 {
				if(CountInv("PowerStrength") == 1) A_FireProjectile("SuperKickAttack", 0, 0, 0, -31);
				else A_FireProjectile("KickAttack", 0, 0, 0, -31);
				if(CountInv("KickHasHitAnObject") == 1) return ResolveState("LowerKick");
				if(Height > 50) return ResolveState("LowerKick");
				return ResolveState(null);
			}
		LowerKick:
			TNT1 A 0 {
				if(CountInv("GrabbedBarrel") == 1 || CountInv("GrabbedIceBarrel") == 1 || CountInv("GrabbedFlameBarrel") == 1)
					A_Overlay(PSP_WEAPON, "FlashBarrelSlideKickingStop");
				else if(PB_WeaponIsInReadyState())
				{
					A_Overlay(PSP_WEAPON, "FlashSlideKickingStop");
					A_GunFlash("Null");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
				}
				A_ZoomFactor(1.0);
				A_StartSound("SlideKick/End",0);
				A_Takeinventory("Kicking",1);
				A_Takeinventory("KickHasHitAnObject",1);
				A_TakeInventory("IsSlideKicking", 1);
				A_Takeinventory("PB_LockScreenTilt",1);
				PB_SetUsingKick(false);
				A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, true);
			}
			SLDK OPQRSTU 1;
			TNT1 A 0 {
				A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, false);
				A_Overlay(-10, "FirstPersonLegsStand");
			}
			Stop;
		AirKick:
			TNT1 A 0 {
				A_StartSound("KICK", 6);
				A_Recoil (-6);
				if(CountInv("GrabbedBarrel") == 1 || CountInv("GrabbedIceBarrel") == 1 || CountInv("GrabbedFlameBarrel") == 1)
					A_Overlay(PSP_WEAPON, "FlashBarrelAirKicking");
				else if(PB_WeaponIsInReadyState())
				{
					A_Overlay(PSP_WEAPON, "FlashAirKicking");
					A_GunFlash("Null");
					A_OverlayOffset(PSP_WEAPON, 0, 32);
				}
				A_OverlayOffset(PSP_WEAPON, 0, 32);
				A_ZoomFactor(0.95);
				A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, true);
			}
			AKCK ABC 1 A_SetRoll(roll-2, SPF_INTERPOLATE);
			AKCK DEFGH 1;
			RIFF A 0 {
				if(CountInv("PowerStrength") == 1) A_FireProjectile("SuperAirKickAttack", 0, 0, 0, -31);
				else A_FireProjectile("AirKickAttack", 0, 0, 0, -31);
				A_ZoomFactor(0.975);
			}
			AKCK IJ 1;
			AKCK K 1 {
				A_ZoomFactor(0.995);
				A_TakeInventory("Kicking",1);
			}
			AKCK LM 1;
			AKCK NO 1 A_SetRoll(roll+2, SPF_INTERPOLATE);
			TNT1 A 1 {
				A_SetRoll(roll+2, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_Takeinventory("PB_LockScreenTilt",1);
				A_OverlayFlags(-999,PSPF_PLAYERTRANSLATED, false);
				PB_SetUsingKick(false);
				A_Overlay(-10, "FirstPersonLegsStand");
			}
			Stop;
		GrabEnemy:	
			TNT1 A 0 {
				A_ClearOverlays(-10,65);
				A_StartSound("weapons/fistwhoosh");
			}
			PKUP ABCDEF 1;
			TNT1 AAAAAAAAAAAAAAAAAAA 0 A_Lower;
			Wait;

		//Barrels. Pope, why's your code so jank? It looks fucking wretched. -AD
		ReadyBarrel:
			TNT1 A 0 A_JumpIfInventory ("GrabbedBarrel", 1, "IdleBarrel");
			TNT1 A 0 {
				A_ClearOverlays(-10,65);
				A_ClearOverlays(10,11);
				A_Stopsound(1);
				A_StopSound(CHAN_VOICE);
				A_Stopsound(5);
				A_StopSound(6);
				A_Takeinventory("HasUnloaded",1);
				A_Takeinventory("Unloading",1);
				A_Takeinventory("Zoomed",1);
				A_ZoomFactor(1.0);
			}
			BANE ABCDEFG 1;
			TNT1 A 0 {
				A_TakeInventory("HasBarrel",1);
				A_GiveInventory("GrabbedBarrel", 1);
			}
			goto IdleBarrel;
		ReadyFlameBarrel:
			TNT1 A 0 A_JumpIfInventory ("GrabbedBarrel", 1, "IdleFlameBarrel");
			TNT1 A 0 {
				A_ClearOverlays(-10,65);
				A_ClearOverlays(10,11);
				A_Stopsound(1);
				A_StopSound(CHAN_VOICE);
				A_Stopsound(5);
				A_StopSound(6);
				A_Takeinventory("HasUnloaded",1);
				A_Takeinventory("Unloading",1);
				A_Takeinventory("Zoomed",1);
				A_ZoomFactor(1.0);
			}
			BAFE ABCDEFG 1;
			TNT1 A 0 {
				A_TakeInventory("HasFlameBarrel",1);
				A_GiveInventory("GrabbedFlameBarrel", 1);
			}
			goto IdleFlameBarrel;
		ReadyIceBarrel:
			TNT1 A 0 A_JumpIfInventory ("GrabbedBarrel", 1, "IdleIceBarrel");
			TNT1 A 0 {
				A_ClearOverlays(-10,65);
				A_ClearOverlays(10,11);
				A_Stopsound(1);
				A_StopSound(CHAN_VOICE);
				A_Stopsound(5);
				A_StopSound(6);
				A_Takeinventory("HasUnloaded",1);
				A_Takeinventory("Unloading",1);
				A_Takeinventory("Zoomed",1);
				A_ZoomFactor(1.0);
			}
			BAIE ABCDEFG 1;
			TNT1 A 0 {
				A_TakeInventory("HasIceBarrel",1);
				A_GiveInventory("GrabbedIceBarrel", 1);
			}
			goto IdleIceBarrel;
		
		//Idle
		IdleBarrel:
			TNT1 A 0 {
				A_Takeinventory("GoWeaponSpecialAbility",1);
				A_Takeinventory("Zoomed",1);
				A_Takeinventory("ADSmode",1);
				A_ZoomFactor(1.0);
				A_ClearOverlays(10,11);
				}
			THRG LKJIHIJKL 2 {	
				A_WeaponReady (WRF_ALLOWRELOAD|WRF_NOSWITCH);
				return A_DoPBWeaponAction (WRF_ALLOWRELOAD|WRF_NOSWITCH); }
			loop;
		IdleFlameBarrel:
			TNT1 A 0 {
				A_Takeinventory("GoWeaponSpecialAbility",1);
				A_Takeinventory("Zoomed",1);
				A_Takeinventory("ADSmode",1);
				A_ZoomFactor(1.0);
				A_ClearOverlays(10,11);
				}
			THRG DEFGFED 2 {	
				A_WeaponReady (WRF_ALLOWRELOAD|WRF_NOSWITCH);
				return A_DoPBWeaponAction (WRF_ALLOWRELOAD|WRF_NOSWITCH); }
			loop;
		IdleIceBarrel:
			TNT1 A 0 {
				A_Takeinventory("GoWeaponSpecialAbility",1);
				A_Takeinventory("Zoomed",1);
				A_Takeinventory("ADSmode",1);
				A_ZoomFactor(1.0);
				A_ClearOverlays(10,11);
				}
			THRG M 1 {	
				A_WeaponReady (WRF_ALLOWRELOAD|WRF_NOSWITCH);
				return A_DoPBWeaponAction (WRF_ALLOWRELOAD|WRF_NOSWITCH); }
			loop;
		
		//Throw
		ThrowBarrel:
			TNT1 A 0 A_JumpIfInventory("PowerStrength",1,1);
			Goto IdleBarrel;
			BANE HIJKLMN 1;
			TNT1 A 0 A_StartSound("weapons/fistwhoosh");
			BANE ONLJH 1;
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
			TNT1 A 0 {
				A_FireProjectile("ThrownBarrel", 0, 1, 0, 0, FPF_NOAUTOAIM);
				A_TakeInventory("Grab1",1);
				A_TakeInventory("Grab2",1);
				A_TakeInventory("Grab3",1);
				A_TakeInventory("Grab4",1);
				A_TakeInventory("Grab5",1);
				A_TakeInventory("Grab6",1);
				A_TakeInventory("Grab7",1);
				A_TakeInventory("Grab8",1);
				A_TakeInventory("GrabbedBarrel",1);
			}
			THRF ABCDEF 2;
			goto GoingToReady;
		ThrowFlameBarrel:
			TNT1 A 0 A_JumpIfInventory("PowerStrength",1,1);
			Goto IdleFlameBarrel;
			BAFE HIJKLMN 1;
			TNT1 A 0 A_StartSound("weapons/fistwhoosh");
			BAFE ONLJH 1;
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
			TNT1 A 0 {
				A_FireProjectile("ThrownFlameBarrel", 0, 1, 0, 0, FPF_NOAUTOAIM);
				A_TakeInventory("FGrab1",1);
				A_TakeInventory("FGrab2",1);
				A_TakeInventory("FGrab3",1);
				A_TakeInventory("FGrab4",1);
				A_TakeInventory("FGrab5",1);
				A_TakeInventory("FGrab6",1);
				A_TakeInventory("FGrab7",1);
				A_TakeInventory("FGrab8",1);
				A_TakeInventory("GrabbedFlameBarrel",1);
			}
			THRF ABCDEF 2;
			goto GoingToReady;
		ThrowIceBarrel:
			TNT1 A 0 A_JumpIfInventory("PowerStrength",1,1);
			Goto IdleIceBarrel;
			BAIE HIJKLMN 1;
			TNT1 A 0 A_StartSound("weapons/fistwhoosh");
			BAIE ONLJH 1;
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
			TNT1 A 0 {
				A_FireProjectile("ThrownIceBarrel", 0, 1, 0, 0, FPF_NOAUTOAIM);
				A_TakeInventory("IGrab1",1);
				A_TakeInventory("IGrab2",1);
				A_TakeInventory("IGrab3",1);
				A_TakeInventory("IGrab4",1);
				A_TakeInventory("IGrab5",1);
				A_TakeInventory("IGrab6",1);
				A_TakeInventory("IGrab7",1);
				A_TakeInventory("IGrab8",1);
				A_TakeInventory("GrabbedIceBarrel",1);
			}
			THRF ABCDEF 2;
			goto GoingToReady;
		
		//Place
		PlaceBarrel:
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
			BANE GFEDCBA 1;
			PKPB HGFEDCBA 1;
			TNT1 A 0 {
				if(CountInv("Grab1")) A_SpawnItemEx ("PB_NukageBarrel",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("Grab2")) A_SpawnItemEx ("PB_NukageBarrelHoles",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("Grab3")) A_SpawnItemEx ("PB_NukageBarrelCut",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("Grab4")) A_SpawnItemEx ("PB_NukageBarrelDented",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("Grab5")) A_SpawnItemEx ("PB_NukageBarrel_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("Grab6")) A_SpawnItemEx ("PB_NukageBarrelHoles_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("Grab7")) A_SpawnItemEx ("PB_NukageBarrelCut_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("Grab8")) A_SpawnItemEx ("PB_NukageBarrelDented_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
			}
			goto CompletePlacement;
		PlaceFlameBarrel:
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
			BAFE GFEDCBA 1;
			PKPB HGFEDCBA 1;
			TNT1 A 0 {
				if(CountInv("FGrab1")) A_SpawnItemEx ("PB_FlameBarrel",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("FGrab2")) A_SpawnItemEx ("PB_FlameBarrelHoles",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("FGrab3")) A_SpawnItemEx ("PB_FlameBarrelCut",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("FGrab4")) A_SpawnItemEx ("PB_FlameBarrelDented",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("FGrab5")) A_SpawnItemEx ("PB_FlameBarrel_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("FGrab6")) A_SpawnItemEx ("PB_FlameBarrelHoles_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("FGrab7")) A_SpawnItemEx ("PB_FlameBarrelCut_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("FGrab8")) A_SpawnItemEx ("PB_FlameBarrelDented_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
			}
			goto CompletePlacement;
		PlaceIceBarrel:
			TNT1 A 0 A_JumpIfInventory("GoFatality", 1, "Steady");
			BAIE GFEDCBA 1;
			PKPB HGFEDCBA 1;
			TNT1 A 0 {
				if(CountInv("IGrab1")) A_SpawnItemEx ("PB_IceBarrel",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("IGrab2")) A_SpawnItemEx ("PB_IceBarrelHoles",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("IGrab3")) A_SpawnItemEx ("PB_IceBarrelCut",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("IGrab4")) A_SpawnItemEx ("PB_IceBarrelDented",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("IGrab5")) A_SpawnItemEx ("PB_IceBarrel_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("IGrab6")) A_SpawnItemEx ("PB_IceBarrelHoles_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("IGrab7")) A_SpawnItemEx ("PB_IceBarrelCut_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
				else if(CountInv("IGrab8")) A_SpawnItemEx ("PB_IceBarrelDented_RedBlood",17,0,0,12,0,0,0,SXF_NOCHECKPOSITION,0);
			}
			goto CompletePlacement;
		CompletePlacement:
			TNT1 A 2 {
				A_StartSound("barrel/pain");
				A_TakeInventory("Grab1",1);
				A_TakeInventory("Grab2",1);
				A_TakeInventory("Grab3",1);
				A_TakeInventory("Grab4",1);
				A_TakeInventory("Grab5",1);
				A_TakeInventory("Grab6",1);
				A_TakeInventory("Grab7",1);
				A_TakeInventory("Grab8",1);
				A_TakeInventory("IGrab1",1);
				A_TakeInventory("IGrab2",1);
				A_TakeInventory("IGrab3",1);
				A_TakeInventory("IGrab4",1);
				A_TakeInventory("IGrab5",1);
				A_TakeInventory("IGrab6",1);
				A_TakeInventory("IGrab7",1);
				A_TakeInventory("IGrab8",1);
				A_TakeInventory("FGrab1",1);
				A_TakeInventory("FGrab2",1);
				A_TakeInventory("FGrab3",1);
				A_TakeInventory("FGrab4",1);
				A_TakeInventory("FGrab5",1);
				A_TakeInventory("FGrab6",1);
				A_TakeInventory("FGrab7",1);
				A_TakeInventory("FGrab8",1);
				A_TakeInventory("GrabbedBarrel",1);
				A_TakeInventory("GrabbedIceBarrel",1);
				A_TakeInventory("GrabbedFlameBarrel",1);
			}
			goto GoingToReady;
		//Flashes
		FlashBarrelKicking:
			BAIE A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, 3);
			BAFE A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, 2);
			BANE A 0;
			"####" IJKLMNOONMLKJI 1 A_DoPBWeaponAction;
			TNT1 A 0 A_JumpIfInventory("GrabbedBarrel", 1, "IdleBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, "IdleIceBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, "IdleFlameBarrel");
			Stop;
		FlashBarrelPunching: 
			BAIQ I 0 A_JumpIfInventory("GrabbedIceBarrel", 1, 3);
			BAFQ I 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, 2);
			BANQ I 0;
			"####" IJKL 1 A_DoPBWeaponAction;
			"####" M 6 A_DoPBWeaponAction;
			"####" LKJI 1 A_DoPBWeaponAction;
			Stop;
		FlashBarrelAirKicking:
			BAIE A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, 3);
			BAFE A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, 2);
			BANE A 0;
			"####" IJKLMNOOOOONMLKJI 1 A_DoPBWeaponAction;
			TNT1 A 0 A_JumpIfInventory("GrabbedBarrel", 1, "IdleBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, "IdleIceBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, "IdleFlameBarrel");
			Stop;
		FlashBarrelSlideKicking:
			BAIE A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, 3);
			BAFE A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, 2);
			BANE A 0;
			"####" IJKLMNOOOOOOOOOOOOOOOOOOOO 1 A_DoPBWeaponAction;
			TNT1 A 0 A_JumpIfInventory("GrabbedBarrel", 1, "IdleBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, "IdleIceBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, "IdleFlameBarrel");
			Stop;
		FlashBarrelSlideKickingStop:
			BAIE A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, 3);
			BAFE A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, 2);
			BANE A 0;
			"####" ONMLKJI 1 A_DoPBWeaponAction;
			TNT1 A 0 A_JumpIfInventory("GrabbedBarrel", 1, "IdleBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedIceBarrel", 1, "IdleIceBarrel");
			TNT1 A 0 A_JumpIfInventory("GrabbedFlameBarrel", 1, "IdleFlameBarrel");
			Stop;
		
		Steady:
			TNT1 A 1 A_JumpIfInventory("GoFatality",1,"Steady");
			Goto GoingToReady;
		
		//Executions
		Execution_Zombieman1_Overlay1:
			KIC5 ABCDEFGHIJKLM 1;
			Stop;
		Execution_Zombieman1:
			TNT1 A 0  {
				A_SpawnItemEx("PB_Zombieman_Execution_1", 32, 0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.1);
			}
			// Frame 1: 5 Ticks
			TNT1 A 0 A_StartSound("weapons/ultrwhoosh", CHAN_AUTO);
			P1N0 AB 1 {
				A_SetPitch(pitch-3, SPF_INTERPOLATE);
				A_SetRoll(roll+2, SPF_INTERPOLATE);
				A_SetAngle(angle-2);
			}
			P1N0 CD 1 { 
				A_SetRoll(roll+2, SPF_INTERPOLATE);
				A_SetAngle(angle-2);
			}
			P1N0 E 1 {
				A_SetRoll(roll-4, SPF_INTERPOLATE);
				A_FireProjectile("ShakeYourAss");
				A_StartSound("player/cyborg/fist", CHAN_AUTO);
				A_SetAngle(angle+9);
				A_SetPitch(pitch-2, SPF_INTERPOLATE);
			}
			// Frame 2: 12 Ticks
			P2NO FGHIJKLMOP 1 {
				A_SetRoll(roll-1,SPF_INTERPOLATE);
				A_SetAngle(angle+2);
				A_SetPitch(pitch+1, SPF_INTERPOLATE);
			}
			TNT1 A 0 A_StartSound("weapons/ultrwhoosh", CHAN_AUTO);
			P1NK FG 1 {
				A_SetRoll(roll+5,SPF_INTERPOLATE);
				A_SetPitch(pitch+2, SPF_INTERPOLATE);
				A_SetAngle(angle-5);
				A_SetPitch(pitch-15, SPF_INTERPOLATE);
			}
			// Frame 3: 15 Ticks
			TNT1 A 0 { 
				A_FireProjectile("ShakeYourAss");
				A_StartSound("misc/xdeath3", CHAN_AUTO);
				A_StartSound("player/cyborg/fist", CHAN_AUTO);
			}
			P2NK HIJKLMNOPQRSTUV 1 {
				A_SetRoll(roll+2);
				A_SetAngle(angle-5);
				A_SetPitch(pitch+2);
			}
			//Frame 4: 8
			TNT1 A 0 {
				A_Overlay(-9,"Execution_Zombieman1_Overlay1");
				A_SetRoll(0,SPF_INTERPOLATE);
				A_StartSound("KICK", CHAN_AUTO );
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, true);
			}
			P6NA ABCDE 1 { 
				A_SetRoll(roll-1,SPF_INTERPOLATE);
				A_SetPitch(pitch+4);
				A_SetAngle(angle+10);
			}
			P6NA FGH 1 {
				A_SetPitch(pitch-10);
				A_SetRoll(roll-5);
				A_SetAngle(angle+4);
			}
			TNT1 A 0 { 
				A_FireProjectile("ShakeYourAss");
				A_StartSound("player/cyborg/fist", CHAN_AUTO);
			}
			P6NA IJKLM 1 A_SetRoll(roll+2,SPF_INTERPOLATE);
			TNT1 A 0 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, false);
			}
			Goto GoingToReady2;

		Execution_Zombieman2_Overlay1:
			//Frame 3: 6 ticks
			KIC2 ABCDEE 1;
			//Frame 4: 12 ticks
			KIC2 E 1 OffSet(-1,33);
			KIC2 E 1 OffSet(-2,34);
			KIC2 E 1 OffSet(-3,35);
			KIC2 E 1 OffSet(-4,36);
			KIC2 E 1 OffSet(-2,34);
			KIC2 E 1 OffSet(0,32);
			KIC2 E 1 OffSet(1,33);
			KIC2 E 1 OffSet(2,34);
			KIC2 E 1 OffSet(3,35);
			KIC2 E 1 OffSet(4,36);
			KIC2 E 1 OffSet(2,34);
			KIC2 E 1 OffSet(0,32);
			//Frame 5: 7 ticks
			KIC2 FGHIJKL 1;
			Stop;
		Execution_Zombieman2:
			TNT1 A 0  {
				A_SpawnItemEx("PB_Zombieman_Execution_2", 32, 0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.3);
			}
			//Frame 1: 5 ticks
			CL1M ABCDE 1 {
				A_SetPitch(pitch-3);
				A_SetRoll(roll+1);
			}
			TNT1 A 0 A_ZoomFactor(1.45);
			//Frame 2: 6 ticks
			CL1M FGFEFG 1 {
				A_SetPitch(pitch+4);
				A_SetRoll(roll-2);
			}
			TNT1 A 0 A_ZoomFactor(1.75, ZOOM_INSTANT);
			//Frame 3: 6 ticks
			TNT1 A 0 {
				A_Overlay(-9,"Execution_Zombieman2_Overlay1");
				A_StartSound("KICK", CHAN_AUTO );
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, true);
			}
			CL1M HIJJJJ 1 {
				A_SetPitch(pitch+1, SPF_INTERPOLATE);
				A_SetRoll(roll-1,SPF_INTERPOLATE);
			}
			TNT1 A 0 {
				A_ZoomFactor(1.5, ZOOM_INSTANT);
				A_SetPitch(pitch-2, SPF_INTERPOLATE);
			}
			//Frame 4:  12 ticks
			TNT1 A 0 A_StartSound("gore/tension", CHAN_AUTO);
			CL1M J 1 OffSet(1,33) A_FireProjectile("ShakeYourAss");
			CL1M J 1 OffSet(2,34) A_ZoomFactor(1.64, ZOOM_INSTANT);
			CL1M J 1 OffSet(3,35) A_ZoomFactor(1.62, ZOOM_INSTANT);
			CL1M J 1 OffSet(4,36) A_FireProjectile("ShakeYourAss");
			CL1M J 1 OffSet(2,34) A_ZoomFactor(1.6, ZOOM_INSTANT);
			CL1M J 1 OffSet(0,32) A_ZoomFactor(1.58, ZOOM_INSTANT);
			CL1M J 1 OffSet(-1,33) A_FireProjectile("ShakeYourAss");
			CL1M J 1 OffSet(-2,34) A_ZoomFactor(1.56, ZOOM_INSTANT);
			CL1M J 1 OffSet(-3,35) A_ZoomFactor(1.54, ZOOM_INSTANT);
			CL1M J 1 OffSet(-4,36) A_FireProjectile("ShakeYourAss");
			1L1M J 1 OffSet(-2,34) A_ZoomFactor(1.5, ZOOM_INSTANT);
			1L1M J 1 OffSet(0,32) A_FireProjectile("ShakeYourAss");
			TNT1 A 0 A_ZoomFactor(1.2);
			//Frame 5: 
			TNT1 A 0 {
				A_StartSound("gore/break", CHAN_AUTO);
				A_SetRoll(roll+20);
			}
			1L1M KKLL 1 A_SetPitch(pitch-10, SPF_INTERPOLATE);
			TNT1 A 5 {
				A_SetPitch(pitch+15, SPF_INTERPOLATE);
				A_SetRoll(roll-12,SPF_INTERPOLATE);
			}
			TNT1 A 2 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, false);
			}
			Goto GoingToReady2;

		Execution_Zombieman3_Overlay1:
			KIC4 ABCDEFGHIIIIJKLM 1;
			Stop;
		Execution_Zombieman3:
			TNT1 A 0  {
				A_SpawnItemEx("PB_Zombieman_Execution_3", 32, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.35);
			}
			// Frame 1: 12 ticks
			TNT1 A 0 A_StartSound("weapons/ultrwhoosh", CHAN_AUTO);
			THRF ABCDEF 1 {
				A_SetRoll(roll-6);
				A_Setpitch(pitch+2);
				A_SetAngle(angle+4);
			}
			TNT1 A 6 {
				A_SetRoll(roll+36,SPF_INTERPOLATE);
				A_SetAngle(angle-24);
			}
			// Frame 2: 4 ticks
			TNT1 AA 2 A_Recoil(-2);
			TNT1 A 0 A_Stop;
			// Frame 3: 7 ticks
			TNT1 A 0 {
				A_Overlay(-9,"Execution_Zombieman3_Overlay1");
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, true);
				A_StartSound("KICK", CHAN_AUTO );
				A_ZoomFactor(1.85, ZOOM_INSTANT);
			}
			P5NA ABCDEFG 1 {
				A_SetRoll(roll+10);
				A_SetAngle(angle-1);
			}
			TNT1 A 0 {
				A_ZoomFactor(2.2, ZOOM_INSTANT);
				A_FireProjectile("ShakeYourAss");
				A_SetPitch(pitch-2);
			}
			P5NA HH 1 {
				A_SetPitch(pitch-4);
				A_SetAngle(angle+3);
			}
			TNT1 A 0 A_ZoomFactor(1.48);
			// Frame 4: 7 ticks
			P5NA HIJKLMN 1 A_SetRoll(roll-10);
			TNT1 A 0 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, false);
			}
			Goto GoingToReady2;

		Execution_Zombieman4_Overlay1:
			CL1M CBA 1;
			Stop;
		Execution_Zombieman4_Overlay2:
			P5NA ABCDEFGHIJKLMN 1;
			Stop;
		Execution_Zombieman4:
			TNT1 A 0  {
				A_SetAngle(angle-180);
				A_SpawnItemEx("PB_Zombieman_Execution_4", 8, 4,-52,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(50, SPF_INTERPOLATE);
				A_ZoomFactor(2.25,ZOOM_INSTANT);
				A_StartSound("player/cyborg/fist", CHAN_AUTO);
				A_Overlay(9,"Execution_Zombieman4_Overlay1");
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, true);
				A_FireProjectile("ShakeYourAss");
			}
			// Frame 1: 12 ticks
			SLDK ABCDE 1 {
				A_SetPitch(pitch+6);
				ThrustThingZ(0,25, 1,0);
				A_SetRoll(roll-4);
				A_SetAngle(angle-2);
			}
			SLDK FGHI 1 A_SetRoll(roll+5);
			// Frame 1: 8 ticks
			SLDK O 1 {
				A_StartSound("NECK_BRK", CHAN_AUTO );
				A_StartSound("BODYF", CHAN_AUTO );
				A_FireProjectile("ShakeYourAss");
			}
			SLDK P 1 {
				A_ZoomFactor(2.15);
				A_SetPitch(pitch-2, SPF_INTERPOLATE);
				A_SetAngle(angle-1);
			}
			SLDK Q 1 {
				A_SetPitch(pitch-2, SPF_INTERPOLATE);
				A_SetAngle(angle-1);
			}
			SLDK R 1 {
				A_ZoomFactor(2.0);
				A_SetPitch(pitch-2, SPF_INTERPOLATE);
				A_SetAngle(angle-1);
			}
			SLDK S 1 {
				A_SetPitch(pitch-2, SPF_INTERPOLATE);
				A_SetAngle(angle-1);
			}
			SLDK T 1 {
				A_ZoomFactor(1.8);
				A_SetPitch(pitch-4, SPF_INTERPOLATE);
			}
			SLDK U 1 A_SetPitch(pitch-4, SPF_INTERPOLATE);
			// 12
			TNT1 A 0 Offset(0,32);
			TNT1 A 5 {
				A_ZoomFactor(1.6);
			}
			TNT1 A 0 {
				A_ZoomFactor(1.86);
				A_Overlay(9,"Execution_Zombieman4_Overlay2");
				A_SetPitch(pitch-3);
			}
			KIC2 ABCDEFG 1 {
				A_SetRoll(roll-10);
				A_SetAngle(angle+3);
			}
			TNT1 A 0 {
				A_FireProjectile("ShakeYourAss");
				A_SpawnItemEx("PB_ZombiemanHeadExplode", 15, 0, 25);
				A_SpawnItemEx("BigBloodSpot", 15, 0, 25);
			}
			KIC2 HHHHH 1 {
				A_SetPitch(pitch+2);
				A_SetAngle(angle-1);
			}
			//5
			KIC2 HIJKL 1 A_SetRoll(roll+5);
			TNT1 AAAAAAAA 1 A_SetPitch(pitch-10, SPF_INTERPOLATE);
			TNT1 A 0 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, false);
			}
			Goto GoingToReady2;
		Execution_Zombieman5:
			TNT1 A 0  {
				A_SpawnItemEx("PB_Zombieman_Execution_5", 38, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.1);
			}
			// Frame 1: 5 Ticks
			TNT1 A 0 A_StartSound("weapons/ultrwhoosh", CHAN_AUTO);
			PBFT A 1 {
				A_ZoomFactor(1.25, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle+1);
				A_SetRoll(roll-5);
			}
			PBFT B 1 {
				A_ZoomFactor(1.35, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle+2);
				A_SetRoll(roll-5);
			}
			PBFT C 1 {
				A_ZoomFactor(1.45, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle+2);
				A_SetRoll(roll-5);
			}
			PBFT D 1 {
				A_ZoomFactor(1.55, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle+3);
				A_SetRoll(roll-5);
			}
			PBFT E 1 {
				A_ZoomFactor(1.65, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle-8);
				A_SetRoll(roll-5);
			}
			TNT1 A 0 {
				A_FireProjectile("ShakeYourAss");
				A_StartSound("NECK_BRK", CHAN_AUTO);
				A_StartSound("EYEPULL", CHAN_AUTO);
			}
			// Frame 2: 24 ticks
			TNT1 A 0 A_StartSound("gore/tension", CHAN_BODY);
			PBFT EFGH 1 {
				A_ZoomFactor(1.67, ZOOM_INSTANT);
				A_SetPitch(pitch-2);
				A_SetAngle(angle-1);
				A_SetRoll(roll+2);
			}
			PBFT EFGH 1 {
				A_ZoomFactor(1.68, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle+1);
				A_SetRoll(roll-2);
			}
			PBFT IJKL 1 {
				A_ZoomFactor(1.69, ZOOM_INSTANT);
				A_SetPitch(pitch-2);
				A_SetAngle(angle-1);
				A_SetRoll(roll+2);
				A_FireProjectile("ShakeYourAss");
			}
			PBFT MNOP 1 {
				A_ZoomFactor(1.70, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle+1);
				A_SetRoll(roll-2);
			}
			PBFT QRST 1 {
				A_ZoomFactor(1.71, ZOOM_INSTANT);
				A_SetPitch(pitch-2);
				A_SetAngle(angle-1);
				A_SetRoll(roll+2);
			}
			TNT1 A 0 A_StartSound("NeckSnap", CHAN_AUTO);
			PBFT UVWXY 1 {
				A_ZoomFactor(1.72, ZOOM_INSTANT);
				A_SetPitch(pitch+2);
				A_SetAngle(angle+1);
				A_SetRoll(roll-2);
			}
			PBFT Z 1 {
				A_FireProjectile("ShakeYourAss");
				A_ZoomFactor(1.8, ZOOM_INSTANT);
				A_StopSound(CHAN_BODY);
				A_StartSound("misc/gibbed", CHAN_AUTO);
			}
			PBF1 A 1 {
				A_SetPitch(pitch+6);
				A_SetAngle(angle-8);
				A_SetRoll(roll+10);
			}
			PBF1 BCD 1 {
				A_SetPitch(pitch+3);
				A_SetAngle(angle-2);
				A_SetRoll(roll+8);
			}
			TNT1 A 0 A_ZoomFactor(1.2);
			TNT1 AA 1 A_SetPitch(pitch+1);
			TNT1 AA 1;
			TNT1 AAAAA 1 {
				A_SetPitch(pitch-4);
				A_SetAngle(angle+1);
				A_SetRoll(roll-9);
			}
			TNT1 A 0 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
			}
			Goto GoingToReady2;
		
		Execution_Zombieman6_Overlay1:
			KIC4 ABCDEFGHIJKLM 1;
			Stop;
		Execution_Zombieman6:
			TNT1 A 0  {
				A_SpawnItemEx("PB_Zombieman_Execution_6", 41, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.2);
				A_Overlay(-9, "Execution_Zombieman6_Overlay1");
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, true);
			}
			// 7
			P5NA ABCDEFG 1 {
				A_SetPitch(pitch+6);
				A_SetAngle(angle-1);
				A_SetRoll(roll+5);
			}
			TNT1 A 0 {
				A_FireProjectile("ShakeYourAss");
				A_StartSound("NeckSnap", CHAN_AUTO);
			}
			// 14
			TNT1 A 5 A_Zoomfactor(1.3, ZOOM_INSTANT);
			TNT1 AAAAA 1 {
				A_SetAngle(angle+1);
				A_SetPitch(pitch-2);
				A_SetRoll(roll-7);
			}
			TNT1 A 0 {
				A_Zoomfactor(1.4, ZOOM_INSTANT);
				A_StartSound("weapons/fistwhoosh", CHAN_AUTO);
				A_SetRoll(roll-12);
			}
			G000 ABCD 1 {
				A_SetPitch(pitch-8);
				A_SetAngle(angle+3);
				A_SetRoll(roll-8);
			}
			TNT1 A 0 {
				A_Zoomfactor(1.6, ZOOM_INSTANT);
				A_FireProjectile("ShakeYourAss");
			}
			TNT1 A 0 {
				A_StartSound("gore/break", CHAN_AUTO);
				A_SetAngle(angle-6);
				A_SetPitch(pitch-6);
			}
			G000 EE 1 {
				A_SetPitch(pitch-10);
				A_SetAngle(angle-1);
				A_SetRoll(roll+9);
			}
			G000 F 1 {
				A_SetPitch(pitch-6);
				A_SetAngle(angle-1);
				A_SetRoll(roll+9);
				A_Zoomfactor(1.5, ZOOM_INSTANT);
			}
			G000 G 1 {
				A_SetPitch(pitch-4);
				A_SetAngle(angle-1);
				A_SetRoll(roll+9);
				A_Zoomfactor(1.44, ZOOM_INSTANT);
			}
			G000 H 1 {
				A_SetPitch(pitch-4);
				A_SetAngle(angle-1);
				A_SetRoll(roll+9);
				A_Zoomfactor(1.32, ZOOM_INSTANT);
			}
			G000 I 1 {
				A_SetPitch(pitch-4);
				A_SetRoll(roll+9);
				A_Zoomfactor(1.25, ZOOM_INSTANT);
			}
			G000 I 6  {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, false);
			}
			Goto GoingToReady2;
		
		//Imp
		Execution_Imp1_Overlay1:
			P5NA ABCDEFG 1;
			Stop;
		Execution_Imp1:
			TNT1 A 0  {
				A_SpawnItemEx("PB_Imp_Execution_1", 41, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.1, ZOOM_INSTANT);
				A_StartSound("KICK", CHAN_AUTO);
				A_Overlay(9,"Execution_Imp1_Overlay1");
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, true);
			}
			// Frame 1: 5 Ticks
			AKCK ABCDE 1 {
				A_SetPitch(pitch-5.0);
				A_SetAngle(angle+2);
				A_SetRoll(roll-9.0);
			}
			// Frame 2: 14 Ticks
			AKCK E 1 Offset(-4,32);
			AKCK E 1 Offset(-8,32);
			AKCK E 1 Offset(-12,32) {
				A_SetPitch(pitch-12.0);
				A_SetAngle(angle+9.0);
				A_SetRoll(roll-19.0);
				A_FireProjectile("ShakeYourAss");
				A_StartSound("execution/impact", CHAN_AUTO);
				A_ZoomFactor(1.25, ZOOM_INSTANT);
			}
			AKCK E 1 Offset(-8,32) {
				A_SetPitch(pitch+6.0);
				A_SetAngle(angle-2.0);
				A_SetRoll(roll+5.0);
			}
			AKCK E 1 Offset(-4,32) {
				A_SetPitch(pitch+4.0);
				A_SetAngle(angle-2.0);
				A_SetRoll(roll+5.0);
			}
			AKCK E 1 Offset(0,32) {
				A_SetPitch(pitch+6.0);
				A_SetAngle(angle-4.0);
				A_SetRoll(roll+5.0);
				A_ZoomFactor(1.12, ZOOM_INSTANT);
			}
			AKCK DCBA 1 {
				A_SetPitch(pitch+7.0);
				A_SetAngle(angle-1);
				A_SetRoll(roll+1.0);
			}
			TNT1 AA 1 A_ZoomFactor(1.15, ZOOM_INSTANT);
			// Frame 3: 10 
			TNT1 A 0 {
				A_StartSound("weapons/ultrwhoosh", CHAN_AUTO);
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, false);
			}
			TNT1 AAA 1 {
				A_SetAngle(angle+11);
				A_SetPitch(pitch-12);
				A_SetRoll(roll-6.0);
			}
			TNT1 AAAA 1 {
				A_SetAngle(angle-3);
				A_SetPitch(pitch+2);
				A_SetRoll(roll+4.0);
			}
			P1NK EFG 1 {
				A_ZoomFactor(1.42, ZOOM_INSTANT);
				A_SetAngle(angle-6);
				A_SetPitch(pitch+3);
				A_SetRoll(roll+8.0);
			}
			// Frame 4
			P2NK H 1 {
				A_StartSound("execution/impactHeavy", CHAN_AUTO);
				A_SetPitch(pitch+4);
				A_SetAngle(angle-20);
				A_SetRoll(roll+25.0);
				A_FireProjectile("ShakeYourAss");
			}
			P2NK IJKLMNO 1 {
				A_SetPitch(pitch+3);
				A_SetAngle(angle-2);
				A_SetRoll(roll+5.0);
			}
			P2NK PQR 1 {
				A_ZoomFactor(1.15, ZOOM_INSTANT);
				A_SetPitch(pitch-6);
				A_SetAngle(angle+6);
				A_SetRoll(roll-15);
			}
			TNT1 A 5 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
			}
			Goto GoingToReady2;
		Execution_Imp2:
			TNT1 A 0  {
				A_SpawnItemEx("PB_Imp_Execution_2", 41, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.2, ZOOM_INSTANT);
				A_StartSound("KNIFUP", CHAN_AUTO);
			}
			TNT1 A 0 A_SetPitch(pitch+19);
			// Frame 1: 9 Ticks
			TNT1 AAA 1 {
				A_SetRoll(roll-75);
				A_SetPitch(pitch-4);
				A_SetAngle(angle+9);
			}
			TNT1 A 0 {
				A_ZoomFactor(1.4, ZOOM_INSTANT);
				A_StartSound("KNIFSWNG", CHAN_AUTO);
			}
			MC3S ABCDEF 1 {
				A_SetRoll(roll+6);
				A_SetPitch(pitch+1);
				A_SetAngle(angle-4);
			}
			// Frame 2: 4 Ticks
			TNT1 A 0 A_StartSound("Machete/Yum", CHAN_AUTO);
			MC3S GHIJ 1 {
				A_SetRoll(roll+6);
				A_SetPitch(pitch+2);
				A_SetAngle(angle-6);
			}
			TNT1 A 0 {
				A_ZoomFactor(1.15, ZOOM_INSTANT);
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, true);
				A_StartSound("KICK", CHAN_AUTO);
			}
			// Frame 3: 12 Ticks
			KIC4 ABCDE 1 {
				A_SetRoll(roll-3);
				A_SetPitch(pitch-1);
				A_SetAngle(angle+2);
			}
			TNT1 A 0 A_ZoomFactor(1.05, ZOOM_INSTANT);
			KIC4 FFFF 1 {
				A_SetPitch(pitch-3);
				A_SetAngle(angle+4);
			}
			TNT1 A 0 A_ZoomFactor(1.5, ZOOM_INSTANT);
			KIC4 GHI 1 {
				A_SetRoll(roll+6);
				A_SetPitch(pitch-3);
				A_SetAngle(angle-3);
			}
			TNT1 A 0 {
				A_StartSound("gore/heavyimpact", CHAN_AUTO);
				A_FireProjectile("ShakeYourAss");
			}
			TNT1 A 0 A_ZoomFactor(1.1);
			KIC4 JKLM 1;
			TNT1 A 0 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, false);
			}
			Goto GoingToReady2;

		Execution_Imp3_Overlay1:
			G003 ABCDEFGHIJKLMNOP 1;
			Stop;
		Execution_Imp3_Overlay2:
			P6NA CDEFGGGG 1;
			Stop;
		Execution_Imp3:
			TNT1 A 0  {
				A_SetAngle(angle-180);
				A_SpawnItemEx("PB_Imp_Execution_3", 8, 4,-52,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(35);
				A_ZoomFactor(2.6,ZOOM_INSTANT);
				A_StartSound("player/cyborg/fist", CHAN_AUTO);
				A_Overlay(9,"Execution_Imp3_Overlay1");
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, true);
				A_FireProjectile("ShakeYourAss");
			}
			// Frame 1: 12 ticks
			SLDK ABCDE 1 {
				A_SetPitch(pitch+6);
				ThrustThingZ(0,25, 1,0);
				A_SetRoll(roll-4);
				//A_SetAngle(angle+2);
			}
			SLDK FGHI 1 { 	
				A_SetRoll(roll+5);
				A_SetPitch(pitch+9);
			}
			// Frame 2: 8 ticks
			SLDK O 1 {
				A_ZoomFactor(2.5,ZOOM_INSTANT);
				A_StartSound("NECK_BRK", CHAN_AUTO );
				A_StartSound("BODYF", CHAN_AUTO );
				A_FireProjectile("ShakeYourAss");
			}
			SLDK P 1 {
				A_SetPitch(pitch-3);
				A_ZoomFactor(2.25, ZOOM_INSTANT);
				//A_SetAngle(angle-1);
			}
			SLDK Q 1 {
				A_SetPitch(pitch-3);
				//A_SetAngle(angle-1);
			}
			SLDK R 1 {
				A_SetPitch(pitch-4);
				A_ZoomFactor(2.10, ZOOM_INSTANT);
				//A_SetAngle(angle-1);
			}
			SLDK S 1 {
				A_SetPitch(pitch-4);
				//A_SetAngle(angle-1);
			}
			SLDK T 1 {
				A_SetPitch(pitch-5);
				A_ZoomFactor(1.8, ZOOM_INSTANT);
			}
			SLDK U 1 {
				A_SetPitch(pitch-5);
				A_ZoomFactor(1.6, ZOOM_INSTANT);
			}
			// Frame 3: 
			TNT1 A 0 Offset(0,32);
			TNT1 A 1 {
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, true);
				A_ZoomFactor(1.86);
			}
			// Frame 3: 8
			PUNS JIH 1;
			TNT1 A 0 A_StartSound("weapons/fistwhoosh", CHAN_AUTO);
			P1NN ABC 1 {
				A_SetAngle(angle+3);
				A_SetPitch(pitch-2);
			}
			TNT1 A 0 A_StartSound("execution/impact", CHAN_AUTO);
			P2NN DE 1 {
				A_SetAngle(angle+2);
				A_SetPitch(pitch+4);
			}
			TNT1 AAAA 1 {
				A_SetAngle(angle-1);
				A_SetPitch(pitch-3);
			}
			// Frame 4: 6
			TNT1 A 0 A_StartSound("weapons/ultrwhoosh", CHAN_AUTO);
			P2NK ABCD 1 {
				A_SetAngle(angle-1);
				A_SetPitch(pitch-4);
				A_SetRoll(roll-2);
			}
			P2NK EF 1 {
				A_SetAngle(angle+4);
				A_SetPitch(pitch+6);
				A_SetRoll(roll-1);
			}
			TNT1 A 0 A_StartSound("execution/impact", CHAN_AUTO);
			// Frame 5: 13
			P2NK GHIJ 1 {
				A_SetAngle(angle-3);
				A_SetPitch(pitch+3);
				A_SetRoll(roll+4);
			}
			P2NK KLMNO 1 {
				A_SetAngle(angle-3);
				A_SetPitch(pitch+2);
				A_SetRoll(roll+2);
			}
			P2NK P 1 {
				A_SetAngle(angle+2);
				A_SetPitch(pitch-2);
				A_SetRoll(roll-9);
				A_Zoomfactor(1.7, ZOOM_INSTANT);
			}
			P2NK Q 1 {
				A_SetAngle(angle+2);
				A_SetPitch(pitch-2);
				A_SetRoll(roll-9);
				A_Zoomfactor(1.6, ZOOM_INSTANT);
			}
			P2NK R 1 {
				A_SetAngle(angle+2);
				A_SetPitch(pitch-2);
				A_SetRoll(roll-9);
				A_Zoomfactor(1.5, ZOOM_INSTANT);
			}
			P2NK S 1 {
				A_SetAngle(angle+2);
				A_SetPitch(pitch-2);
				A_SetRoll(roll-9);
				A_Zoomfactor(1.4, ZOOM_INSTANT);
			}
			TNT1 A 0 {
				A_Overlay(9,"Execution_Imp3_Overlay2");
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, true);
			}
			// Frame 6: 13
			TNT1 A 0 {
				A_SetPitch(pitch-3);
				A_StartSound("KICK", CHAN_AUTO);
			}
			KIC1 A 1 {
				A_SetPitch(pitch-2);
				A_SetRoll(roll-1);
				A_Zoomfactor(1.35, ZOOM_INSTANT);
			}
			KIC1 B 1 {
				A_SetPitch(pitch-2);
				A_SetRoll(roll-1);
				A_Zoomfactor(1.3, ZOOM_INSTANT);
			}
			KIC1 C 1 {
				A_SetPitch(pitch-4);
				A_SetRoll(roll-2);
				A_Zoomfactor(1.25, ZOOM_INSTANT);
			}
			KIC1 D 1 {
				A_SetPitch(pitch-4);
				A_SetRoll(roll-2);
				A_Zoomfactor(1.2, ZOOM_INSTANT);
			}
			KIC1 EE 1 A_Zoomfactor(1.1, ZOOM_INSTANT);
			KIC1 E 1 {
				A_SetPitch(pitch+5);
				A_SetAngle(angle+3);
				A_SetRoll(roll-3);
				A_ZoomFactor(1.8);
			}
			KIC1 FG 1 {
				A_SetPitch(pitch+5);
				A_SetAngle(angle+3);
				A_SetRoll(roll-3);
			}
			TNT1 A 0 {
				A_FireProjectile("ShakeYourAss");
				A_SpawnItemEx("BigBloodSpot", 15, 0, 25);
				A_StartSound("gore/heavyimpact", CHAN_AUTO);
			}
			KIC1 HHHHHHHH 1;
			TNT1 A 0 A_Zoomfactor(1.2);
			// Frame 7: 13
			KIC1 HIJKL 1 {
				A_SetPitch(pitch-1);
				A_SetRoll(roll+1);
			}
			TNT1 AAAAAAAA 1 A_SetPitch(pitch-10, SPF_INTERPOLATE);
			TNT1 A 0 {
				PB_UnsetPlayerExecutionProperties();
				A_SetRoll(0, SPF_INTERPOLATE);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.0);
				A_GiveInventory("Stimpack", 2);
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, false);
			}
			Goto GoingToReady2;
		
		//Shotgunner
		Execution_ShotgunGuy1:
			TNT1 A 0  {
				A_SpawnItemEx("PB_ShotgunGuy_Execution_1", 32, 0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.1);
			}
			Goto Execution_Zombieman1+2;
		Execution_ShotgunGuy2:
			TNT1 A 0  {
				A_SpawnItemEx("PB_ShotgunGuy_Execution_2", 32, 0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.3);
			}
			Goto Execution_Zombieman2+2;
		Execution_ShotgunGuy3:
			TNT1 A 0  {
				A_SpawnItemEx("PB_ShotgunGuy_Execution_3", 32, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.35);
			}
			Goto Execution_Zombieman3+2;
		Execution_ShotgunGuy4:
			TNT1 A 0  {
				A_SetAngle(angle-180);
				A_SpawnItemEx("PB_ShotgunGuy_Execution_4", 8, 4,-52,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(50, SPF_INTERPOLATE);
				A_ZoomFactor(2.25,ZOOM_INSTANT);
				A_StartSound("player/cyborg/fist", CHAN_AUTO);
				A_Overlay(9,"Execution_Zombieman4_Overlay1");
				A_OverlayFlags(PSP_WEAPON,PSPF_PLAYERTRANSLATED, true);
			}
			Goto Execution_Zombieman4+2;
		Execution_ShotgunGuy5:
			TNT1 A 0  {
				A_SpawnItemEx("PB_ShotgunGuy_Execution_5", 32, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.35);
			}
			Goto Execution_Zombieman5+2;
		Execution_ShotgunGuy6:
			TNT1 A 0  {
				A_SpawnItemEx("PB_ShotgunGuy_Execution_6", 41, 0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SetPitch(0, SPF_INTERPOLATE);
				A_ZoomFactor(1.2);
				A_Overlay(-9, "Execution_Zombieman6_Overlay1");
				A_OverlayFlags(-9,PSPF_PLAYERTRANSLATED, true);
			}
			Goto Execution_Zombieman6+2;
	}
}

class PB_Weapon : PB_WeaponBase {} //This is just a dummy class for inheriting reasons

class PB_DualWeapon : PB_Weapon
{
	States
	{
	 ThrowMine:
	 ThrowGrenade:
		TNT1 A 0 {
			A_ZoomFactor(1.0);
			A_TakeInventory("ADSMode", 1);
			A_TakeInventory("DoGrenade", 1);
			A_TakeInventory("DoMine", 1);
			A_Print("You can't throw right now!");
		}
		Goto GoingToReady;
	}
}

class PB_UpgradeItem : CustomInventory
{
	Default
	{+DONTGIB;}
	action void A_SetSpawnSprite(String str)
	{
	   sprite = GetSpriteIndex(str);
	}
}
